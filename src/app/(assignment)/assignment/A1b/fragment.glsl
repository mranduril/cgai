/////////////////////////////////////////////////////
//// CS 8803/4803 CGAI: Computer Graphics in AI Era
//// Assignment 1B: Neural SDF
/////////////////////////////////////////////////////

precision highp float;              //// set default precision of float variables to high precision

varying vec2 vUv;                   //// screen uv coordinates (varying, from vertex shader)
uniform vec2 iResolution;           //// screen resolution (uniform, from CPU)
uniform float iTime;                //// time elapsed (uniform, from CPU)

#define PI 3.1415925359

const vec3 CAM_POS = vec3(0, 1, 0);

vec3 rotate(vec3 p, vec3 ax, float ro)
{
    return mix(dot(p, ax) * ax, p, cos(ro)) + sin(ro) * cross(ax, p);
}

struct material {
    float sdf;
    int id;
};

/////////////////////////////////////////////////////
//// sdf functions
/////////////////////////////////////////////////////

float sdfPlane(vec3 p, float h)
{
    return p.y - h;
}

float sdfBuzz(vec3 p) {


    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    p = rotate(p, vec3(1., 0., 0.),  2. * PI / 3.);
    p = rotate(p, vec3(0., 0., 1.), PI);
    if(length(p) > 1.0)
    {
        return length(p) - 0.9;
    }
    
    vec4 f0_0=sin(p.y*vec4(4.35,1.26,-2.90,4.80)+p.z*vec4(4.01,4.60,-2.11,1.40)+p.x*vec4(-3.29,-1.36,-1.63,2.07)+vec4(-6.27,.31,7.53,3.77));
    vec4 f0_1=sin(p.y*vec4(2.21,2.81,-1.49,4.60)+p.z*vec4(.41,2.50,-3.36,2.11)+p.x*vec4(.88,-4.21,-1.06,-1.53)+vec4(3.99,7.35,-1.27,6.04));
    vec4 f0_2=sin(p.y*vec4(1.67,-1.92,-1.16,3.46)+p.z*vec4(-3.61,.38,.81,-3.35)+p.x*vec4(-2.52,1.59,-3.40,2.55)+vec4(8.37,-6.48,7.48,2.08));
    vec4 f0_3=sin(p.y*vec4(4.75,-2.32,-1.09,-.61)+p.z*vec4(-.77,3.76,.45,3.04)+p.x*vec4(2.48,4.44,-1.82,-.21)+vec4(-.38,-5.90,5.45,-7.79));
    vec4 f0_4=sin(p.y*vec4(.59,2.81,1.41,.79)+p.z*vec4(-1.65,-4.26,-1.71,-.81)+p.x*vec4(5.10,-3.63,-1.57,3.63)+vec4(1.37,6.59,1.34,2.09));
    vec4 f0_5=sin(p.y*vec4(.96,2.12,-3.52,2.36)+p.z*vec4(-3.59,4.45,4.38,1.33)+p.x*vec4(1.53,-3.59,-3.59,-4.55)+vec4(7.55,.23,-1.65,3.12));
    vec4 f0_6=sin(p.y*vec4(-.02,-3.41,4.29,.80)+p.z*vec4(3.10,2.16,-3.79,-1.74)+p.x*vec4(.86,-1.33,4.62,-.36)+vec4(3.64,6.27,3.86,-5.12));
    vec4 f0_7=sin(p.y*vec4(-1.76,-2.06,-3.85,3.54)+p.z*vec4(1.15,-2.94,-1.84,.26)+p.x*vec4(2.81,-3.85,1.25,1.86)+vec4(-1.57,-3.83,-7.50,3.86));
    vec4 f1_0=sin(mat4(.02,.09,-.06,.15,.21,.14,.09,.19,-.28,.13,-.35,.02,.29,.15,.17,.58)*f0_0+
        mat4(.33,-.32,.09,-.14,.37,.03,-.04,-.04,-.19,.11,.10,.28,-.23,-.32,.39,.04)*f0_1+
        mat4(-.15,-.19,.17,.46,.00,.10,.12,-.05,.19,-.32,.17,-.06,-.06,.07,.08,.03)*f0_2+
        mat4(.03,.18,-.05,-.28,.17,.28,.55,.13,.08,.36,-.05,.31,.36,-.12,.05,-.08)*f0_3+
        mat4(.65,.12,-.13,-.24,-.13,.50,.30,.19,-.24,-.15,.10,.31,-.31,.53,.32,.25)*f0_4+
        mat4(.26,-.28,-.20,.34,.26,.08,.09,.43,.19,.01,.64,.01,-.13,-.11,.43,.25)*f0_5+
        mat4(-.33,.10,-.35,.36,.10,.35,-.18,-.31,-.25,.42,.26,-.13,.14,.23,.18,-.14)*f0_6+
        mat4(-.23,.37,.45,-.29,.21,-.35,.02,-.10,-.11,.04,.54,.34,-.08,.37,.47,.38)*f0_7+
        vec4(1.19,-2.46,-.64,1.63))/1.0+f0_0;
    vec4 f1_1=sin(mat4(-.03,-.34,-.21,-.22,-.17,.04,.45,-.18,.87,.11,.28,.62,-.00,-.22,.34,-.10)*f0_0+
        mat4(.53,.15,.41,.34,.13,.18,-.62,-.09,.04,.30,.10,-.70,-.20,.50,.33,.19)*f0_1+
        mat4(-.17,-.46,.47,.24,-.07,.16,-.21,.30,.06,-.17,-.04,.27,-.08,-.18,.40,.11)*f0_2+
        mat4(-.24,-.07,-.08,-.12,.07,-.05,-.17,.07,.33,-.48,.37,.31,.20,.22,-.08,.34)*f0_3+
        mat4(.30,.03,-.46,-.27,-.03,-.49,-.23,-.04,.03,-.26,.30,.12,.15,.21,.01,-.02)*f0_4+
        mat4(.07,.32,.11,-.20,.45,-.19,-.36,-.35,-.05,-.26,.14,.26,.43,.29,-.15,.24)*f0_5+
        mat4(.54,-.31,.48,.18,.13,-.50,-.34,.28,.46,.04,-.08,-.06,.18,.43,-.20,.36)*f0_6+
        mat4(.28,.08,.07,.32,-.20,.12,.16,-.26,.83,.06,-.16,.04,-.01,-.01,-.03,-.23)*f0_7+
        vec4(1.72,-2.42,1.51,-1.88))/1.0+f0_1;
    vec4 f1_2=sin(mat4(-.35,-.07,-.18,.18,-.19,.21,.11,.14,-.02,.32,-.61,.12,-.27,.02,.46,.24)*f0_0+
        mat4(-.00,-.30,.22,-.12,.20,-.05,.25,.26,.05,-.06,.19,.03,-.03,.03,.51,.09)*f0_1+
        mat4(-.26,.03,-.20,.37,-.17,-.14,-.43,-.19,-.49,-.24,.01,-.14,.23,.31,-.13,-.19)*f0_2+
        mat4(.19,.45,-.37,.20,-.11,-.18,-.56,.14,.12,-.46,.01,.19,.06,-.39,-.47,.07)*f0_3+
        mat4(-.04,-.13,-.19,-.23,.43,-.15,.50,.19,-.57,-.13,-.29,.08,-.51,.15,-.49,.30)*f0_4+
        mat4(-.04,.08,-.12,.34,-.36,-.32,-.01,.19,.17,.41,.11,.08,-.40,-.04,-.41,.25)*f0_5+
        mat4(.35,.43,-.06,.33,.05,-.42,.28,-.21,-.13,-.01,.45,.03,.21,-.10,.49,-.22)*f0_6+
        mat4(.02,-.75,.63,.04,.13,.15,.45,.14,-.49,-.50,.27,.10,-.45,.06,-.34,.33)*f0_7+
        vec4(-1.79,2.56,2.29,-1.63))/1.0+f0_2;
    vec4 f1_3=sin(mat4(.09,.23,.18,-.26,.36,.01,.08,.06,-.52,-.04,.33,-.22,-.16,.33,-.03,-.39)*f0_0+
        mat4(.12,.22,.14,-.18,.24,.02,.30,.04,-.41,.05,-.30,-.30,.06,.29,.16,.12)*f0_1+
        mat4(-.22,-.19,-.18,.03,.42,-.05,-.61,-.02,-.30,-.30,.31,.27,-.57,.29,.09,-.05)*f0_2+
        mat4(-.27,.25,.43,.20,-.16,.34,.02,.29,.34,-.46,.00,.16,.28,.41,-.37,.17)*f0_3+
        mat4(.28,.06,.11,.22,-.50,-.31,.18,.17,-.29,-.27,-.03,-.23,-.40,.31,-.12,.40)*f0_4+
        mat4(-.27,-.41,-.28,.02,-.32,-.28,.21,.14,-.09,.31,.41,-.17,-.08,.26,-.33,-.33)*f0_5+
        mat4(-.17,.31,.18,.10,-.11,-.23,.30,.04,-.23,.08,.05,.05,-.29,.23,-.08,.34)*f0_6+
        mat4(-.28,.07,-.31,-.36,.31,-.31,.07,.38,-.26,-.14,-.09,-.34,-.10,-.24,-.12,-.18)*f0_7+
        vec4(.94,-1.74,-.78,1.01))/1.0+f0_3;
    vec4 f1_4=sin(mat4(-.01,-.17,.14,.10,.40,.06,-.03,-.47,-.04,.25,-.18,.19,.18,-.10,-.44,.11)*f0_0+
        mat4(-.45,-.30,.02,.34,-.37,.44,.18,.19,-.11,.24,.54,.40,.28,-.16,-.59,-.05)*f0_1+
        mat4(-.43,-.16,-.24,.20,-.01,-.60,.02,.02,.01,.05,-.21,-.41,-.53,-.39,.41,-.33)*f0_2+
        mat4(.24,.06,-.02,-.59,-.23,.03,-.46,.54,.09,-.26,-.52,-.21,-.08,.56,.23,.42)*f0_3+
        mat4(-.21,.04,.31,.22,-.30,.65,-.14,-.09,.36,.13,.28,.16,-.25,.18,-.02,-.11)*f0_4+
        mat4(.07,-.19,.03,.04,.03,-.26,.07,.10,.16,-.13,-.35,-.03,-.31,.28,.07,.21)*f0_5+
        mat4(.14,.26,-.21,-.22,-.03,-.16,-.56,-.05,-.03,.01,-.02,-.48,.10,.06,.38,-.26)*f0_6+
        mat4(.16,-.30,.32,-.00,-.52,-.29,-.08,-.41,-.31,-.23,.53,.13,-.26,.06,.06,-.10)*f0_7+
        vec4(-1.30,-2.83,1.61,1.67))/1.0+f0_4;
    vec4 f1_5=sin(mat4(-.16,.12,-.07,.21,-.41,-.00,.30,.31,-.27,.01,-.12,.06,.38,-.13,.34,.40)*f0_0+
        mat4(.08,-.14,.04,.13,-.42,-.17,.32,-.06,.09,-.37,-.23,.25,.08,.51,.31,.14)*f0_1+
        mat4(-.12,.18,-.08,-.19,.41,.28,.13,.14,-.12,.42,.29,-.24,.42,-.18,-.43,-.22)*f0_2+
        mat4(.07,.22,.03,-.25,.33,.42,.05,-.19,.03,.15,.26,-.44,.15,.28,-.35,-.04)*f0_3+
        mat4(.07,-.36,.10,.13,-.26,-.36,-.41,.08,.25,-.21,-.04,.35,-.16,.34,.20,-.30)*f0_4+
        mat4(.36,-.18,.30,.29,.21,.34,-.36,-.03,.36,.13,-.26,-.55,-.09,-.07,.02,.11)*f0_5+
        mat4(-.41,-.06,.27,.18,-.32,-.46,-.02,-.52,-.02,.55,-.03,-.01,-.07,-.19,-.34,-.25)*f0_6+
        mat4(.32,.18,-.13,.14,-.24,-.42,-.19,-.16,.31,-.01,-.16,-.03,-.05,-.22,.14,.11)*f0_7+
        vec4(1.15,-.54,-1.79,-1.14))/1.0+f0_5;
    vec4 f1_6=sin(mat4(-.17,-.18,-.10,.31,-.33,-.15,.06,.02,.03,.24,-.19,-.03,.30,-.36,.24,.42)*f0_0+
        mat4(.18,.20,.06,-.24,-.01,-.12,-.06,-.35,-.05,-.00,.02,.59,.04,-.10,-.11,.47)*f0_1+
        mat4(.14,.23,.20,.41,-.32,.13,.39,.42,.16,-.11,-.01,-.03,.02,.32,-.33,.29)*f0_2+
        mat4(.01,-.32,-.47,.22,-.38,.28,-.52,-.02,-.31,-.02,.38,-.12,.04,-.36,-.07,.16)*f0_3+
        mat4(.03,-.09,.01,.13,-.10,.08,-.32,-.26,.09,.22,-.31,-.01,-.18,.44,.30,.29)*f0_4+
        mat4(.35,.13,.44,-.35,.06,.38,-.18,.38,.13,.36,-.20,-.19,-.09,.26,.11,.00)*f0_5+
        mat4(-.15,.18,-.23,-.09,-.61,-.02,-.11,.26,-.32,-.05,.26,-.09,.14,.40,-.26,-.45)*f0_6+
        mat4(.18,.17,.11,-.09,-.19,.61,-.11,.17,-.16,-.03,-.20,-.65,-.31,.12,-.23,.02)*f0_7+
        vec4(2.14,.07,-1.51,2.19))/1.0+f0_6;
    vec4 f1_7=sin(mat4(.14,.31,-.37,-.25,-.11,-.28,-.11,.53,-.38,.05,.23,.77,.14,.29,.00,-.14)*f0_0+
        mat4(-.35,-.19,-.17,-.28,-.07,-.17,.51,.25,.11,.07,.33,.39,-.46,-.41,-.45,.23)*f0_1+
        mat4(-.41,-.27,.14,-.19,-.56,.11,-.47,-.25,-.21,-.16,-.18,-.07,.43,.12,-.42,.41)*f0_2+
        mat4(.34,-.54,.35,-.22,-.11,-.25,.06,.11,-.30,.01,.32,.30,.26,.04,-.00,.11)*f0_3+
        mat4(-.37,.08,.24,.47,-.41,.11,.25,.05,.29,-.15,.41,-.19,-.57,-.12,-.13,-.19)*f0_4+
        mat4(-.22,.01,-.24,-.16,.11,-.13,-.29,-.09,-.24,.21,-.22,.20,-.03,-.04,.57,-.09)*f0_5+
        mat4(-.19,.43,.13,.46,-.18,.09,-.51,.02,.49,-.08,-.12,-.31,.23,-.19,-.12,.23)*f0_6+
        mat4(.52,-.08,-.55,.06,-.09,-.21,-.36,-.36,-.11,-.23,-.13,-.68,-.25,-.47,.42,.14)*f0_7+
        vec4(-2.33,-.46,-1.68,.20))/1.0+f0_7;
    vec4 f2_0=sin(mat4(.12,-.99,.21,-.18,-.41,-.34,-.27,.14,.34,-.48,.06,-.27,.22,-.57,-.56,-.20)*f1_0+
        mat4(.14,-.56,-.32,.39,.04,-.57,-.12,.09,.86,-.17,-.81,.53,-.31,.68,-.13,.45)*f1_1+
        mat4(-.27,-.50,.32,.35,.31,.77,-.41,.10,-.23,-.62,.39,-.04,-.02,.03,.66,-.16)*f1_2+
        mat4(-.25,.90,-.25,-.58,.24,-.11,.59,.28,.15,-.66,.22,-.05,-.10,.34,-.09,-.04)*f1_3+
        mat4(-.26,-.41,.33,-.47,-.06,.24,.90,.19,-.34,.61,.23,.33,.30,-.32,-.61,-.10)*f1_4+
        mat4(-.19,-.31,-.49,.01,.04,.56,.45,.22,-.40,-.77,-.30,.04,.20,-.30,-.57,.46)*f1_5+
        mat4(.26,-.06,.57,.45,.23,-.09,-.58,.08,-.16,.48,-.27,-.28,-.33,-.75,.31,.18)*f1_6+
        mat4(.28,.49,-.10,-.17,-.10,.07,.54,.19,-.15,.14,.04,-.23,-.09,.78,.07,-.18)*f1_7+
        vec4(.49,1.45,-2.15,-1.29))/1.4+f1_0;
    vec4 f2_1=sin(mat4(.22,-.15,.48,.46,-.13,.17,.38,-.37,.41,-.37,.68,.42,-.11,.04,-.08,-.18)*f1_0+
        mat4(.01,-.46,.29,.20,-.19,-.54,.21,-.27,.14,-.73,-.02,-.49,.00,-.28,.21,.33)*f1_1+
        mat4(.39,.31,.47,-.05,.39,.12,.23,.18,-.11,.07,-.03,.28,-.09,-.08,-.63,-.33)*f1_2+
        mat4(-.22,.13,-.37,-.25,.41,.37,-.48,.58,-.16,-.48,.59,-.02,.45,.26,-.56,-.45)*f1_3+
        mat4(-.37,-.50,.04,.28,-.11,.31,.16,.15,-.24,.34,-.15,-.23,.02,-.34,.29,.12)*f1_4+
        mat4(.25,-.18,.22,.60,-.66,-.01,-.22,.02,-.11,.07,-.31,-.14,.32,.06,.13,.25)*f1_5+
        mat4(-.67,-.06,.05,-.20,-.24,.42,-.15,.29,.09,.13,.17,-.24,.19,.16,-.25,-.13)*f1_6+
        mat4(.15,-.11,-.50,.25,.05,-.01,.09,-.57,-.38,.36,-.65,.04,-.08,-.33,.50,.29)*f1_7+
        vec4(.77,-1.08,1.29,.59))/1.4+f1_1;
    vec4 f2_2=sin(mat4(-.13,.06,-.29,.23,.42,.05,-.65,-.30,-.33,.15,-.17,.21,.38,.38,-.44,.28)*f1_0+
        mat4(.29,-.08,.32,-.02,-.31,-.01,.25,-.39,-.21,.59,-.35,-.04,-.25,.05,-.51,.09)*f1_1+
        mat4(.05,.18,.61,-.40,.16,-.14,.10,.59,.36,.06,-.39,.27,-.05,-.25,.27,-.23)*f1_2+
        mat4(.30,.05,-.54,-.16,.27,.12,-.28,.20,-.20,.02,.42,-.09,.01,-.14,.39,.28)*f1_3+
        mat4(-.47,.49,.20,-.25,-.47,.32,.06,.04,.13,-.06,-.27,-.09,.04,.55,-.27,-.51)*f1_4+
        mat4(-.23,.30,.08,.43,-.32,.04,-.27,-.01,-.02,-.25,.08,-.02,-.42,.32,.46,-.40)*f1_5+
        mat4(.18,.18,.43,.31,.45,.08,-.17,.01,-.43,.05,-.01,.02,.22,-.02,.27,.46)*f1_6+
        mat4(-.43,-.51,.13,-.08,-.16,-.22,-.52,-.38,.31,.22,.16,-.32,.04,.04,.41,.15)*f1_7+
        vec4(-1.98,1.33,-.85,1.39))/1.4+f1_2;
    vec4 f2_3=sin(mat4(.00,.37,-.24,-.20,.74,-.21,-.07,-.23,.29,.23,-.02,.50,.23,-.23,-.23,.15)*f1_0+
        mat4(.65,.01,.37,-.19,-.06,.09,-.16,-.18,-.31,-.00,.28,.14,-.07,.39,.47,.45)*f1_1+
        mat4(.71,.14,.35,.31,.86,-.14,.11,-.41,-.02,.03,-.23,-.03,-.06,-.05,-.09,.33)*f1_2+
        mat4(.46,-.35,.08,-.81,.28,.21,-.05,.47,.41,.03,-.39,.43,.86,-.34,-.32,-.42)*f1_3+
        mat4(-.08,-.14,.13,-.31,-.01,.47,-.27,.05,-.58,-.21,.16,-.42,-.23,.30,.17,.33)*f1_4+
        mat4(.70,-.17,.06,-.49,-.49,.01,-.52,-.31,.06,.61,-.25,.24,.90,.07,.17,.13)*f1_5+
        mat4(-.12,.41,.53,.30,.44,-.42,.35,-.28,.22,.25,-.35,-.03,.10,.18,.54,-.35)*f1_6+
        mat4(-.56,-.45,-.28,.41,.56,.48,-.16,.05,.48,.35,-.12,.53,.40,.42,.48,-.23)*f1_7+
        vec4(1.42,.31,.70,-.72))/1.4+f1_3;
    vec4 f2_4=sin(mat4(.59,-.09,-.02,.35,.00,-.28,-.18,-.28,.10,.09,-.01,.11,-.05,.45,.37,.47)*f1_0+
        mat4(-.18,.60,.41,.19,-.31,.34,-.05,.69,-.22,-.36,.21,.15,-.23,.27,-.03,-.40)*f1_1+
        mat4(.28,-.01,.03,-.22,-.19,.26,.35,.66,.25,-.21,.25,.28,-.38,-.48,.13,.30)*f1_2+
        mat4(-.33,.09,-.17,.65,.35,.04,.49,-.14,-.32,.16,.40,-.22,.41,.27,.50,-.10)*f1_3+
        mat4(-.23,-.14,-.21,.05,-.19,.11,-.04,-.21,.28,-.51,-.05,-.65,-.27,.27,.18,.19)*f1_4+
        mat4(.22,-.41,-.33,.28,-.20,-.30,-.04,-.14,.25,.24,.18,-.25,-.10,.26,.41,.58)*f1_5+
        mat4(.10,.31,.38,.29,-.23,.28,.38,.03,-.01,.28,.02,-.55,.06,.20,-.23,.13)*f1_6+
        mat4(-.21,.06,-.07,.76,.00,-.46,-.10,.03,.66,.04,-.30,1.10,.44,.25,-.25,-.73)*f1_7+
        vec4(-1.81,.52,.39,-.41))/1.4+f1_4;
    vec4 f2_5=sin(mat4(-.41,-.03,.15,-.09,.00,-.41,.42,-.16,.35,-.04,-.28,.46,-.40,-.09,.16,.38)*f1_0+
        mat4(.64,.37,.18,.51,.39,-.02,-.37,-.04,-.30,-.22,.39,.02,.12,-.46,-.28,.01)*f1_1+
        mat4(.08,.12,-.06,-.46,-.36,-.37,-.27,-.08,.09,.06,.27,.04,.21,-.50,-.12,-.32)*f1_2+
        mat4(.00,-.28,-.40,.33,-.15,-.35,.09,.11,-.14,.12,-.24,.16,-.46,.51,-.03,-.04)*f1_3+
        mat4(.60,-.23,.51,-.33,.12,-.19,.43,-.13,-.43,.06,-.39,.14,-.63,-.06,.39,.07)*f1_4+
        mat4(.18,-.10,.29,-.00,.03,.24,.36,.72,.09,.25,-.14,.28,.54,.02,.38,-.30)*f1_5+
        mat4(-.11,.14,-.03,.43,-.17,.32,.24,.07,-.12,-.40,.39,.38,.08,.27,-.20,.40)*f1_6+
        mat4(-.12,.15,-.38,-.17,.35,.13,.38,-.15,-.12,.18,.20,-.08,-.16,-.12,-.20,.08)*f1_7+
        vec4(-2.54,.81,-.40,2.11))/1.4+f1_5;
    vec4 f2_6=sin(mat4(-.02,.30,-.08,-.20,.46,-.45,-.13,.16,-.10,-.14,.24,.11,-.29,-.12,-.29,.00)*f1_0+
        mat4(-.44,.18,-.64,.35,.15,-.24,-.18,-.36,-.13,-.49,.71,.26,.43,-.31,-.64,-.35)*f1_1+
        mat4(.45,-.06,.45,.20,.12,-.15,.51,.01,.59,-.08,-.26,-.37,.68,-.49,.47,.36)*f1_2+
        mat4(.18,.27,.15,-.33,.22,-.17,.22,-.33,.34,.31,-.79,.35,-.39,-.47,-.46,-.20)*f1_3+
        mat4(-.16,-.25,.24,.24,.52,.30,.02,-.25,.21,.07,.52,-.25,-.19,-.47,-.12,-.12)*f1_4+
        mat4(-.30,.03,.79,-.00,-.26,.24,-.27,-.27,.24,-.43,-.06,.04,-.06,-.61,-.14,-.10)*f1_5+
        mat4(-.19,-.24,-.31,.07,-.27,.28,-.57,-.17,.27,-.41,.31,.31,-.41,.23,-.95,.36)*f1_6+
        mat4(.24,-.10,-.27,.41,.52,.24,.06,.09,-.48,.40,.30,-.38,-.11,.16,-.16,-.28)*f1_7+
        vec4(-1.95,-.21,-.95,-.81))/1.4+f1_6;
    vec4 f2_7=sin(mat4(-.31,.57,-.00,-.54,.26,-.57,-.44,-.06,.57,-.22,-.17,-.60,.11,-.01,.06,.23)*f1_0+
        mat4(-.34,.04,.50,.11,.32,-.25,-.07,-.19,.32,.15,.14,-.39,-.46,.36,-.47,.07)*f1_1+
        mat4(-.41,-.21,.02,.28,.45,.21,.27,-.26,.14,-.22,-.23,.32,-.44,.27,-.14,-.15)*f1_2+
        mat4(.28,-.03,-.10,.39,-.37,-.46,.26,-.15,.48,-.22,-.20,-.00,.19,.37,.08,-.30)*f1_3+
        mat4(-.73,.20,-.02,-.28,-.31,-.53,.66,.09,-.07,-.15,.20,-.31,-.10,.17,-.33,-.13)*f1_4+
        mat4(.39,.10,.10,-.08,-.20,-.21,.40,.01,-.02,-.13,-.37,.36,-.35,.03,.33,.07)*f1_5+
        mat4(.11,-.01,.61,-.01,.54,.64,.21,-.03,.22,-.06,.31,-.32,.35,-.22,.30,.12)*f1_6+
        mat4(.12,-.25,-.21,.09,.38,.34,-.17,.20,-.31,.10,-.18,-.15,-.39,-.34,-.18,.23)*f1_7+
        vec4(-1.35,1.56,-2.09,-1.09))/1.4+f1_7;
    return dot(f2_0,vec4(.04,-.01,.02,.03))+
        dot(f2_1,vec4(.03,-.05,.03,-.03))+
        dot(f2_2,vec4(.01,.03,-.02,-.05))+
        dot(f2_3,vec4(.03,-.03,-.04,.03))+
        dot(f2_4,vec4(-.03,.04,.02,.02))+
        dot(f2_5,vec4(.04,.05,-.03,-.02))+
        dot(f2_6,vec4(.04,.03,-.02,-.01))+
        dot(f2_7,vec4(.02,-.04,.02,-.02))+
        -0.006;

}

float sdfBunny(vec3 p)
{
    p = rotate(p, vec3(1., 0., 0.), PI / 2.);
    p = rotate(p, vec3(0., 0., 1.), PI / 2. + PI / 1.);

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if(length(p) > 1.0)
    {
        return length(p) - 0.9;
    }

    //// neural network weights for the bunny 

    vec4 f0_0=sin(p.y*vec4(1.74,-2.67,1.91,-1.93)+p.z*vec4(2.15,-3.05,.50,-1.32)+p.x*vec4(2.47,.30,-2.00,-2.75)+vec4(1.31,6.89,-8.25,.15));
    vec4 f0_1=sin(p.y*vec4(-.72,-3.13,4.36,-3.50)+p.z*vec4(3.39,3.58,-4.52,-1.10)+p.x*vec4(-1.02,-2.90,2.23,-.62)+vec4(1.61,-.84,-2.00,-.47));
    vec4 f0_2=sin(p.y*vec4(-1.47,.32,-.70,-1.51)+p.z*vec4(.17,.75,3.59,4.05)+p.x*vec4(-3.10,1.40,4.72,2.90)+vec4(-6.76,-6.43,2.41,-.66));
    vec4 f0_3=sin(p.y*vec4(-2.75,1.59,3.43,-3.39)+p.z*vec4(4.09,4.09,-2.34,1.23)+p.x*vec4(1.07,.65,-.18,-3.46)+vec4(-5.09,.73,3.06,3.35));
    vec4 f1_0=sin(mat4(.47,.12,-.23,-.04,.48,.06,-.24,.19,.12,.72,-.08,.39,.37,-.14,-.01,.06)*f0_0+
        mat4(-.62,-.40,-.81,-.30,-.34,.08,.26,.37,-.16,.38,-.09,.36,.02,-.50,.34,-.38)*f0_1+
        mat4(-.26,-.51,-.32,.32,-.67,.35,-.43,.93,.12,.34,.07,-.01,.67,.27,.43,-.02)*f0_2+
        mat4(.02,-.18,-.15,-.10,.47,-.07,.82,-.46,.18,.44,.39,-.94,-.20,-.28,-.20,.29)*f0_3+
        vec4(-.09,-3.49,2.17,-1.45))/1.0+f0_0;
    vec4 f1_1=sin(mat4(-.46,-.33,-.85,-.57,.41,.87,.25,.58,-.47,.16,-.14,-.06,-.70,-.82,-.20,.47)*f0_0+
        mat4(-.15,-.73,-.46,-.58,-.54,-.34,-.02,.12,.55,.32,.22,-.87,-.57,-.28,-.51,.10)*f0_1+
        mat4(.75,1.06,-.08,-.17,-.43,.69,1.07,.23,.46,-.02,.10,-.11,.21,-.70,-.08,-.48)*f0_2+
        mat4(.04,-.09,-.51,-.06,1.12,-.21,-.35,-.17,-.95,.49,.22,.99,.62,-.25,.06,-.20)*f0_3+
        vec4(-.61,2.91,-.17,.71))/1.0+f0_1;
    vec4 f1_2=sin(mat4(.01,-.86,-.07,.46,.73,-.28,.83,.12,.16,.33,.28,-.55,-.21,-.02,.53,-.15)*f0_0+
        mat4(-.28,-.32,.19,-.28,.24,-.23,-.61,-.39,.26,.40,.18,.41,.21,.57,-.91,-.29)*f0_1+
        mat4(.23,-.40,-1.34,-.50,.08,-.04,-1.67,-.16,-.65,-.09,.38,-.22,-.14,-.34,.37,.05)*f0_2+
        mat4(-.47,-.23,-.57,-.05,.51,.04,.00,.27,.80,.29,-.09,-.53,-.20,-.41,-.64,-.12)*f0_3+
        vec4(1.08,4.00,-2.54,2.18))/1.0+f0_2;
    vec4 f1_3=sin(mat4(-.30,.38,.39,.53,.73,.73,-.06,.01,.54,-.07,-.19,.68,.59,.40,.04,.07)*f0_0+
        mat4(-.17,.44,-.61,.43,-.84,-.12,.65,-.50,.33,-.31,-.28,.13,.18,-.42,.14,.08)*f0_1+
        mat4(-.78,.06,-.18,.37,-.99,.49,.71,.15,.27,-.48,-.17,.25,.05,.10,-.40,-.21)*f0_2+
        mat4(-.17,-.27,.40,.18,-.24,.23,.03,-.83,-.30,-.38,.07,.21,-.45,-.24,.78,.50)*f0_3+
        vec4(2.14,-3.48,3.81,-1.43))/1.0+f0_3;
    vec4 f2_0=sin(mat4(.83,.15,-.49,-.80,-.83,.16,1.24,.75,-.27,.18,-.13,1.05,.70,-.15,.30,.79)*f1_0+
        mat4(-.38,-.17,.34,.67,-.39,.09,.48,-.93,.19,.60,-.20,-.22,-.76,-.62,-.40,.01)*f1_1+
        mat4(.10,.22,.08,.13,-.42,-.11,.71,-.63,.02,.46,-.07,-.46,-.37,.07,.15,.14)*f1_2+
        mat4(.09,-.48,-.38,.40,-.57,-.88,-.14,-.25,.20,.95,.86,-1.08,.46,.04,.53,-.82)*f1_3+
        vec4(3.47,-3.66,3.06,.84))/1.4+f1_0;
    vec4 f2_1=sin(mat4(1.03,.03,-.76,-.03,.84,.66,-.49,.74,-.09,-.85,-.55,.17,.07,.85,-.55,-.20)*f1_0+
        mat4(-.55,1.13,.41,-.21,-.55,.19,.49,.67,.40,1.80,-.82,-.83,-1.02,.78,-.42,-.51)*f1_1+
        mat4(.77,-.88,.64,1.10,-.49,1.05,-.43,-.38,.66,-.63,.02,.11,-.24,-.23,.49,-.65)*f1_2+
        mat4(-.66,1.90,.02,-.48,.22,-.62,-.68,-.44,.52,-.57,.16,-.61,-.03,-.02,-.88,-.23)*f1_3+
        vec4(.58,-3.00,-2.53,.14))/1.4+f1_1;
    vec4 f2_2=sin(mat4(-.44,-.06,.30,-.37,.27,-.23,-.56,.15,.03,-.14,-.08,.72,.76,-.58,.55,.29)*f1_0+
        mat4(.31,.23,.42,-.17,.37,-.05,.39,.46,-1.14,.32,.06,-.28,.28,-.21,-.58,.62)*f1_1+
        mat4(.92,-.16,.86,-.09,-.12,.33,-.49,-.24,.29,-.19,.95,-.40,-.87,.08,.08,-.71)*f1_2+
        mat4(-.45,.67,1.07,-.14,-.56,.06,-.81,-.15,-.57,-.24,-1.09,.69,-.44,-.32,-.00,-.07)*f1_3+
        vec4(-4.43,-1.86,-2.87,1.45))/1.4+f1_2;
    vec4 f2_3=sin(mat4(.58,.25,.01,-.54,.34,.56,.61,-.79,-.01,.05,-.57,-1.31,.74,.78,-.10,-.11)*f1_0+
        mat4(-.03,-.48,-.24,.01,.10,.23,.22,-.05,.76,.29,-.37,.02,.54,-.07,.27,.38)*f1_1+
        mat4(.31,-1.03,.24,.95,.80,.29,.43,.61,-.04,-.22,-.06,-.52,-.46,.35,.07,-.07)*f1_2+
        mat4(.47,-.12,-.62,.06,.47,-.41,.53,-2.14,-.59,.16,.74,-.58,.32,.66,-.30,-.18)*f1_3+
        vec4(-2.86,-3.27,-.55,2.87))/1.4+f1_3;
    return dot(f2_0,vec4(-.08,.03,.07,-.03))+
        dot(f2_1,vec4(-.03,-.02,-.06,-.07))+
        dot(f2_2,vec4(.05,-.09,.03,.11))+
        dot(f2_3,vec4(.03,.06,-.06,-.03))+
        -0.014;
}

/////////////////////////////////////////////////////
//// Step 1: training a neural SDF model
//// You are asked to train your own neural SDF model on Colab. 
//// Your implementation should take place in neural_sdf.ipynb.
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 2: copy neural SDF weights to GLSL
//// In this step, you are asked to the network weights you have trained from the text file to the function sdfCow().
//// You should replace the default implementation (a sphere) with your own network weights. 
/////////////////////////////////////////////////////

float sdfCow(vec3 p)
{
    p = rotate(p, vec3(1., 0., 0.), PI / 2.);
    p = rotate(p, vec3(0., 0., 1.), PI / 3. + PI/3.0);

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if(length(p) > 1.)
    {
        return length(p) - 0.9;
    }

    //// your implementation starts
    vec4 f0_0=sin(p.y*vec4(-3.01,2.17,3.83,2.85)+p.z*vec4(3.05,-.65,3.84,1.23)+p.x*vec4(1.52,-3.55,-2.66,1.17)+vec4(2.01,4.53,-1.51,-1.82));
    vec4 f0_1=sin(p.y*vec4(.16,.75,-1.51,1.73)+p.z*vec4(3.62,-2.55,2.20,.60)+p.x*vec4(1.15,-3.68,-2.58,4.26)+vec4(-5.44,8.27,-8.10,1.01));
    vec4 f0_2=sin(p.y*vec4(3.75,-2.67,.07,-2.24)+p.z*vec4(-.72,4.04,2.13,3.44)+p.x*vec4(3.37,-.56,-.37,-.17)+vec4(2.20,-6.90,-6.51,7.84));
    vec4 f0_3=sin(p.y*vec4(-3.27,-3.19,3.55,-2.76)+p.z*vec4(-4.86,-2.63,-1.71,.81)+p.x*vec4(-3.40,1.93,2.10,-2.34)+vec4(1.81,-7.93,3.96,-8.29));
    vec4 f1_0=sin(mat4(.05,.36,-.01,-.32,.27,-.40,.43,-.36,.16,.15,.12,.56,.40,.36,-.22,.18)*f0_0+
        mat4(.03,.35,.16,.18,.02,-.60,.17,-.26,-.29,-.44,.36,-.42,.13,-.07,-.25,.18)*f0_1+
        mat4(.35,-.10,-.31,-.71,-.56,.41,.46,.28,.62,-.01,.28,-.29,-.26,-.53,.74,-.18)*f0_2+
        mat4(-.08,.30,.04,.33,.25,-.52,-.12,-1.16,.18,-.03,.58,.74,-.72,.19,-.34,-.46)*f0_3+
        vec4(-2.96,-2.11,-1.42,-3.62))/1.0+f0_0;
    vec4 f1_1=sin(mat4(.58,.28,-.66,.03,-.03,-.43,-.46,.26,-.32,-.27,-.49,.26,.27,.55,-.45,.63)*f0_0+
        mat4(.12,.10,-.20,-.55,.39,-.96,.10,.75,-.08,-.26,.04,-.23,.30,-.26,.41,.36)*f0_1+
        mat4(.14,-.31,.32,.19,-.00,-.47,-.00,.56,-.86,-.50,-.45,.16,.15,-.55,-.53,.49)*f0_2+
        mat4(.15,-.27,-.15,.23,.63,-.51,.70,.11,-.09,-.19,-.32,.29,-.12,-.23,.24,-.47)*f0_3+
        vec4(-2.13,-1.13,-1.31,3.57))/1.0+f0_1;
    vec4 f1_2=sin(mat4(.65,.24,-.92,.13,-.45,.14,-.17,.74,.12,.29,.41,-.04,-.56,.23,-.05,.19)*f0_0+
        mat4(.73,-.56,.38,-.66,-.31,-.04,-.34,.41,.42,.56,.24,.26,-.36,-.31,-.13,-.15)*f0_1+
        mat4(-.36,.16,.02,.62,.48,.34,-.15,.21,.31,.14,.11,.04,.12,-.20,.09,-.01)*f0_2+
        mat4(-.03,-.23,-.32,.53,.45,-.04,-.12,.22,-.06,-.01,-.33,.52,.30,-.17,.22,.03)*f0_3+
        vec4(-3.52,-.63,-2.48,-3.37))/1.0+f0_2;
    vec4 f1_3=sin(mat4(.67,.00,.05,.21,-.27,.09,-.48,-.06,-.19,-.18,.43,.47,.42,-.19,.39,-.21)*f0_0+
        mat4(-.11,.12,-.24,.15,-.05,.69,-.20,.20,-.58,-.25,.05,.40,-.44,.04,-.04,-.52)*f0_1+
        mat4(.10,-.15,-.25,.10,.58,-.43,.18,.12,-1.13,-.65,-.05,-.27,.53,-.89,.89,-.08)*f0_2+
        mat4(.10,-.03,-.37,.32,-.22,-.49,-.99,-.60,.51,-.07,-.51,.12,-.11,-.17,-.29,-.41)*f0_3+
        vec4(-.83,-3.89,1.20,1.60))/1.0+f0_3;
    vec4 f2_0=sin(mat4(.01,.72,-.01,.18,.11,.08,-.20,-.47,.71,.03,.25,-.55,-.22,.08,.36,.27)*f1_0+
        mat4(-.83,.69,-.26,-.39,-.21,-.67,-.49,.47,.34,.18,.09,-.27,-.41,-.02,.16,.16)*f1_1+
        mat4(.02,.04,.24,.47,-.58,-.31,-.21,.58,-.27,-.35,.04,1.03,-.05,-.11,.38,.20)*f1_2+
        mat4(-.30,-.19,.33,.06,-.86,-1.02,.04,.83,-.91,-.49,.27,-.06,-.51,.33,-.60,-.67)*f1_3+
        vec4(.09,-.96,-1.60,1.12))/1.4+f1_0;
    vec4 f2_1=sin(mat4(-.04,.57,-.16,-.84,.10,.17,-.43,-.35,.22,-.32,.28,.26,-.30,.34,-.38,.76)*f1_0+
        mat4(.49,.50,-.10,.02,.06,-.51,-.09,.06,-.58,.03,-.79,.19,-.06,-.27,-.40,.12)*f1_1+
        mat4(.16,-.33,.62,-.57,.01,.39,-.57,-1.18,.09,.46,-.49,-.45,.69,-.59,.20,-.40)*f1_2+
        mat4(.26,.04,-.59,.26,-.33,-.26,.34,-.90,.29,.10,-.01,.19,-.36,.36,.51,-.93)*f1_3+
        vec4(-.62,2.06,-3.47,-1.68))/1.4+f1_1;
    vec4 f2_2=sin(mat4(.89,.43,-.30,-.26,-.10,-.58,-.09,.28,-.25,.29,-.45,-.36,.70,.39,-.74,-.28)*f1_0+
        mat4(-.15,-.07,.27,-.41,-.36,-.20,.12,.30,.02,-.70,-.67,.29,1.19,.25,.54,.57)*f1_1+
        mat4(-.02,-.31,-.51,-.31,.23,.41,.04,.76,.44,-.19,-.57,.99,.16,-.43,.78,-.02)*f1_2+
        mat4(-.18,.19,.23,.05,.15,-.09,.23,.47,.40,.20,.23,.13,-.76,-.24,.30,.52)*f1_3+
        vec4(-3.21,-2.85,.64,-1.89))/1.4+f1_2;
    vec4 f2_3=sin(mat4(.40,-.77,.47,-.33,.86,.10,.07,.49,-.37,-1.58,-1.35,-.04,-.26,.57,.27,.23)*f1_0+
        mat4(-.14,-.75,-.32,.19,-.11,-.42,.03,-.32,-.10,.05,.07,-.11,-.88,-.91,-.02,-.46)*f1_1+
        mat4(.20,-.58,.64,.85,.06,.93,.35,.21,.06,-.19,.25,.82,.27,-.03,1.32,.45)*f1_2+
        mat4(-.11,-.38,1.33,.44,.39,.28,.66,-.30,.72,-.02,.33,-.12,-.39,.63,-1.03,1.04)*f1_3+
        vec4(3.46,-2.31,2.02,.57))/1.4+f1_3;
    return dot(f2_0,vec4(-.08,-.04,-.08,.05))+
        dot(f2_1,vec4(-.06,-.08,-.05,-.03))+
        dot(f2_2,vec4(-.04,-.06,-.03,-.11))+
        dot(f2_3,vec4(-.06,.03,.02,.09))+
        -0.179;
    //// your implementation ends
}

float sdfTeddy(vec3 p)
{
    p = rotate(p, vec3(1., 0., 0.), PI / 2.);
    p = rotate(p, vec3(0., 0., 1.), PI / 3. + PI/3.0);

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if(length(p) > 1.)
    {
        return length(p) - 0.9;
    }

    //// your implementation starts
    vec4 f0_0=sin(p.y*vec4(-2.65,1.81,2.05,2.75)+p.z*vec4(-2.51,-2.35,-1.12,3.02)+p.x*vec4(-1.86,3.89,.15,-2.08)+vec4(-5.23,5.30,1.33,6.90));
    vec4 f0_1=sin(p.y*vec4(.72,3.63,1.36,-2.38)+p.z*vec4(-2.69,3.50,3.80,.65)+p.x*vec4(-.39,1.94,-2.39,4.07)+vec4(2.61,7.14,7.95,6.57));
    vec4 f0_2=sin(p.y*vec4(-1.84,3.84,-4.05,-.56)+p.z*vec4(.38,1.90,-4.19,-.28)+p.x*vec4(.38,-.92,-1.64,2.86)+vec4(-3.70,1.72,.74,-1.68));
    vec4 f0_3=sin(p.y*vec4(-2.58,2.12,3.27,3.88)+p.z*vec4(4.76,1.64,-5.27,-4.49)+p.x*vec4(.45,3.10,.77,.42)+vec4(-8.53,-2.91,-4.10,5.74));
    vec4 f1_0=sin(mat4(-.18,-.11,-.17,-.26,-.51,-.43,-.32,-.00,-.55,-.31,-.51,-.36,-.11,.07,.02,.27)*f0_0+
        mat4(.70,.44,-.04,.42,.09,-.60,.37,.26,-.15,-.17,-1.08,-.34,.44,.62,-.00,.10)*f0_1+
        mat4(-.30,-.04,.36,.60,.35,-.64,.84,-.26,.20,-.07,.30,.01,-.54,-.11,-.87,.12)*f0_2+
        mat4(-.03,-.09,-.55,.41,-.25,-.35,.78,-.79,-.13,.10,.35,-.18,-.00,-.10,.08,-.61)*f0_3+
        vec4(-1.81,1.94,-3.09,-1.92))/1.0+f0_0;
    vec4 f1_1=sin(mat4(.14,.08,.04,.19,.34,-.08,.09,.16,.18,.05,-.08,-.31,.18,-.02,.13,.48)*f0_0+
        mat4(-.38,.01,.62,-.08,-.06,-.64,.49,.15,.83,.13,-.30,-.47,-.17,-.00,-.04,.92)*f0_1+
        mat4(-.41,-.07,.76,-.24,-.16,-.20,-.30,-.02,.36,-.69,.14,-.24,-.57,-.50,-1.13,-.04)*f0_2+
        mat4(.14,.08,.40,-.49,-.09,-.13,.06,-.83,-.05,-.26,-1.00,-.21,.52,-.50,-1.52,.27)*f0_3+
        vec4(2.41,-.15,-1.67,-3.49))/1.0+f0_1;
    vec4 f1_2=sin(mat4(.18,.35,-.26,.33,-.67,-.41,-.46,.05,.76,-.04,1.15,.92,.04,-.17,-.23,-.19)*f0_0+
        mat4(.86,-.59,.81,.01,-.37,-.41,.36,-.35,-.86,-.00,.25,.09,-1.20,.42,-.29,-.20)*f0_1+
        mat4(-.43,-.47,-.54,-.21,.38,.05,-.01,.20,-.07,-.45,-.92,-.04,.12,.55,-.52,-.25)*f0_2+
        mat4(.56,-.19,.22,.19,.25,-.54,.33,-.06,.25,.32,.20,.16,.01,-.08,.08,-.19)*f0_3+
        vec4(2.87,-.38,-.51,2.20))/1.0+f0_2;
    vec4 f1_3=sin(mat4(-.99,-.28,.01,-.31,.90,-.30,.47,-.25,-.13,-.32,-1.12,-.60,-.39,.58,-.44,.22)*f0_0+
        mat4(-.32,.09,.49,.55,-.26,.36,-.28,.65,.26,.40,.14,.16,-.53,.06,.05,-.05)*f0_1+
        mat4(-.99,-.12,-.33,.49,.46,.14,.04,.30,.63,.08,.76,.00,-.38,.07,-.17,.10)*f0_2+
        mat4(.63,.02,-.60,.05,-.08,-.52,.19,.27,-.05,-.01,.15,-.38,-.27,-.12,.26,-.04)*f0_3+
        vec4(1.98,-.74,-.74,-2.41))/1.0+f0_3;
    vec4 f2_0=sin(mat4(-.69,1.20,-.47,.69,.36,-.14,.04,-.57,-.06,.07,-.50,.09,-.52,-.86,.35,-.27)*f1_0+
        mat4(.06,1.02,.77,-.73,-.50,-1.18,-.15,-.88,.02,1.19,.01,-.23,-.18,.04,-.47,.94)*f1_1+
        mat4(-.47,.57,.50,-.39,-.26,-.02,.24,.47,-.94,.11,.16,-.18,-.79,-.31,.10,-.04)*f1_2+
        mat4(.19,-.49,-.66,-.32,.34,-1.29,.42,-.76,-.54,-.59,-.06,-.33,.24,-.71,.25,.13)*f1_3+
        vec4(-2.56,-3.98,1.15,-.32))/1.4+f1_0;
    vec4 f2_1=sin(mat4(-.17,-.15,-.42,1.40,-.06,-.38,-.10,-.26,-.16,.45,-.16,.24,-.70,.25,-.68,.80)*f1_0+
        mat4(.29,.16,-.26,-.15,-.04,.12,-.54,-.04,-.26,.18,-.21,.09,-.68,-.08,-1.20,.69)*f1_1+
        mat4(1.04,.05,.81,-.73,.64,-.51,-.48,-.43,1.06,-.15,-.12,-.58,.25,.36,.38,-.34)*f1_2+
        mat4(.61,.09,.32,-1.10,.74,.68,.93,-1.32,-.00,.36,-.54,-.86,-.64,.39,-.72,.10)*f1_3+
        vec4(2.48,-1.26,2.09,-3.83))/1.4+f1_1;
    vec4 f2_2=sin(mat4(.20,.36,-1.18,.27,.32,-.12,.68,-.65,-1.33,-.09,-.48,-.31,.07,-.55,-.29,-.42)*f1_0+
        mat4(.63,.08,.40,.27,.01,-.64,.01,-.19,.55,-.13,.35,.84,-.02,-.60,-1.09,-.57)*f1_1+
        mat4(-.40,.26,.40,.10,-.20,.29,1.26,.06,.27,-.14,.87,-.48,.42,.22,1.38,.17)*f1_2+
        mat4(-.55,.67,-.42,-.25,-.59,.94,.88,.96,-.38,.14,.76,.37,-.23,-.91,-.18,.70)*f1_3+
        vec4(-2.44,-2.76,-3.74,-3.89))/1.4+f1_2;
    vec4 f2_3=sin(mat4(-.76,-.02,-.37,-.28,-.06,.57,-.35,-.45,-.35,-.44,-.13,.11,.72,.26,-.26,.68)*f1_0+
        mat4(-.03,-.17,.28,-.21,.51,-.44,.26,-.28,.03,.26,-.72,-.32,-.09,-.09,.47,-.66)*f1_1+
        mat4(-.12,-.10,.65,.49,-.55,-.03,.68,-.45,-.42,.29,.97,-.10,1.20,.13,-.00,-.71)*f1_2+
        mat4(-.04,.04,-.62,.06,.20,.46,.33,.12,.12,-.35,.28,.10,-.05,-.41,-.54,.38)*f1_3+
        vec4(3.69,3.92,2.69,-.33))/1.4+f1_3;
    return dot(f2_0,vec4(-.04,.02,.04,-.04))+
        dot(f2_1,vec4(-.03,-.10,-.06,.04))+
        dot(f2_2,vec4(-.03,-.07,-.03,.11))+
        dot(f2_3,vec4(-.02,-.07,.02,-.06))+
        -0.109;
        //// your implementation ends
}

float sdfUnion(float d1, float d2)
{
    return min(d1, d2);
}

/////////////////////////////////////////////////////
//// Step 3: scene sdf
//// You are asked to use the sdf boolean operations to draw the bunny and the cow in the scene.
//// The bunny is located in the ceter of vec3(-1.0, 1., 4.), and the cow is located in the center of vec3(1.0, 1., 4.).
/////////////////////////////////////////////////////

//// sdf: p - query point
material sdf(vec3 p)
{
    float s = 0.;

    float plane_h = -0.1;

    //// calculate the sdf based on all objects in the scene

    //// your implementation starts
    // float s_bunny = sdfBunny(p - vec3(-2.0, 1.0, 4.0));
    // float s_cow = sdfCow(p - vec3(0.0, 1., 4.));
    // float s_teddy = sdfTeddy(p - vec3(2., 1., 4.));
    // float s_obj = sdfUnion(sdfUnion(s_buzz, s_cow), s_teddy);
    // s = sdfUnion(s_obj, sdfPlane(p, plane_h));

    float s_buzz = sdfBuzz(p - vec3(0.0, 1., 4.));
    // float s_cow = sdfCow(p - vec3(0.0, 1., 4.));
    // float s_obj = sdfUnion(s_buzz, s_cow);
    s = s_buzz;
    // s = sdfUnion(s_obj, sdfPlane(p, plane_h));

    material m;
    m.sdf = s;
    m.id = 1;
    // if (s_cow <= 0.02) m.id = 2;
    if (s_buzz <= 0.02) m.id = 3;
    // if (s_teddy <= 0.02) m.id = 4;
    //// your implementation ends

    return m;
}

/////////////////////////////////////////////////////
//// ray marching
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 4: ray marching
//// You are asked to implement the ray marching algorithm within the following for-loop.
//// You are allowed to reuse your previous implementation in A1a for this function.
/////////////////////////////////////////////////////

//// ray marching: origin - ray origin; dir - ray direction 
float rayMarching(vec3 origin, vec3 dir)
{
    float s = 0.0;

    //// your implementation starts
    float delta = 0.0;
    for(int i = 0; i < 100; i++)
    {
        //// your implementation starts
        vec3 p = origin + dir * s;
        delta = sdf(p).sdf;
        s += delta;
        if (delta < 0.001 || s > 100.0) break;
        //// your implementation ends
    }
    //// your implementation ends

    return s;
}

/////////////////////////////////////////////////////
//// normal calculation
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 5: normal calculation
//// You are asked to calculate the sdf normal based on finite difference.
//// You are allowed to reuse your previous implementation in A1a for this function.
/////////////////////////////////////////////////////

//// normal: p - query point
vec3 normal(vec3 p)
{
    float s = sdf(p).sdf;          //// sdf value in p
    float dx = 0.01;           //// step size for finite difference

    //// your implementation starts
    return normalize(vec3(
        sdf(p + vec3(dx, 0.0, 0.0)).sdf - s,
        sdf(p + vec3(0.0, dx, 0.0)).sdf - s,
        sdf(p + vec3(0.0, 0.0, dx)).sdf - s));
    //// your implementation ends

    // return n;
}

/////////////////////////////////////////////////////
//// Phong shading
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 6: lighting and coloring
//// You are asked to specify the color for the two neural SDF objects in the scene.
//// Each object must have a separate color without mixing.
//// Notice that we have implemented the default Phong shading model for you.
/////////////////////////////////////////////////////

vec3 phong_shading(vec3 p, vec3 n)
{
    //// background
    if(p.z > 20.0)
    {
        vec3 color = vec3(0.04, 0.16, 0.33);
        return color;
    }

    //// phong shading
    vec3 lightPos = vec3(4. * sin(iTime), 4., 4. * cos(iTime));
    vec3 l = normalize(lightPos - p);
    float amb = 0.1;
    float dif = max(dot(n, l), 0.) * 0.7;
    vec3 eye = CAM_POS;
    float spec = pow(max(dot(reflect(-l, n), normalize(eye - p)), 0.0), 128.0) * 0.9;

    vec3 sunDir = normalize(vec3(0, 1, -1)); //// parallel light direction
    float sunDif = max(dot(n, sunDir), 0.) * 0.2;

    //// shadow
    float s = rayMarching(p + n * 0.02, l);
    if(s < length(lightPos - p))
        dif *= .2;

    vec3 color = vec3(1.0);

    //// your implementation starts
    material m = sdf(p);
    if (m.id == 1) color = vec3(0.6, 0.4, 0.1);
    if (m.id == 2) color = vec3(0.6, 0.2, 0.4); // cow
    if (m.id == 3) color = vec3(0.4, 0.6, 0.2); // bunny
    if (m.id == 4) color = vec3(0.2, 0.4, 0.5); // teddy
    //// your implementation ends

    return (amb + dif + spec + sunDif) * color;
}

/////////////////////////////////////////////////////
//// main function
/////////////////////////////////////////////////////

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    vec2 uv = (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;         //// screen uv
    vec3 origin = CAM_POS;                                                  //// camera position 
    vec3 dir = normalize(vec3(uv.x, uv.y, 1));                              //// camera direction
    float s = rayMarching(origin, dir);                                     //// ray marching
    vec3 p = origin + dir * s;                                              //// ray-sdf intersection
    vec3 n = normal(p);                                                     //// sdf normal
    vec3 color = phong_shading(p, n);                                       //// phong shading
    fragColor = vec4(color, 1.);                                            //// fragment color
}

void main()
{
    mainImage(gl_FragColor, gl_FragCoord.xy);
}