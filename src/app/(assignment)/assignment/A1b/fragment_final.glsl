
/////////////////////////////////////////////////////
//// CS 8803/4803 CGAI: Computer Graphics in AI Era
//// Assignment 2A: Volumetric Ray Tracing
/////////////////////////////////////////////////////

precision highp float;              //// set default precision of float variables to high precision

varying vec2 vUv;                   //// screen uv coordinates (varying, from vertex shader)
uniform vec2 iResolution;           //// screen resolution (uniform, from CPU)
uniform float iTime;                //// time elapsed (uniform, from CPU)
uniform highp sampler3D iVolume;    //// volume texture
uniform vec2 mouse;

#define PI 3.14159265359

vec3 rotate(vec3 p, vec3 ax, float ro)
{
    return mix(dot(p, ax) * ax, p, cos(ro)) + sin(ro) * cross(ax, p);
}

struct material {
    float sdf;
    int id;
};

/////////////////////////////////////////////////////
//// Perlin noise
/////////////////////////////////////////////////////


float map(float value, float old_lo, float old_hi, float new_lo, float new_hi)
{
	float old_range = old_hi - old_lo;
    if (old_range == 0.0) {
	    return new_lo; 
	} else {
	    float new_range = new_hi - new_lo;  
	    return (((value - old_lo) * new_range) / old_range) + new_lo;
	}
}

/**
 * The canonical GLSL hash function
 */
float hash(float x)
{
	return fract(sin(x) * 43758.5453123);
}

/** 
 * Nothing is mathematically sound about anything below: 
 * I just chose values based on experimentation and some 
 * intuitions I have about what makes a good hash function
 */
vec3 gradient(vec3 cell)
{
	float h_i = hash(cell.x);
	float h_j = hash(cell.y + pow(h_i, 3.0));
	float h_k = hash(cell.z + pow(h_j, 5.0));
    float ii = map(fract(h_i + h_j + h_k), 0.0, 1.0, -1.0, 1.0);
    float jj = map(fract(h_j + h_k), 0.0, 1.0, -1.0, 1.0);
	float kk = map(h_k, 0.0, 1.0, -1.0, 1.0);
    return normalize(vec3(ii, jj, kk));
}

/**
 * Perlin's "ease-curve" fade function
 */
float fade(float t)
{
   	float t3 = t * t * t;
    float t4 = t3 * t;
    float t5 = t4 * t;
    return (6.0 * t5) - (15.0 * t4) + (10.0 * t3);        
}    

/**
 * The meat of it:
 *
 * It helps to visualize the unit cube:
 *
 *      (0,1,1)----------------(1,1,1)
 *        /|                     /|
 *       / |                    / |
 *      /  |                   /  |
 *     /   |                  /   |
 * (0,1,0)-+--------------(1,1,0) |
 *    |    |                 |    |
 *    |    |                 |    |
 *    |    |                 |    |
 *    | (0,0,1)--------------+-(1,0,1)
 *    |   /                  |   /
 *    |  /                   |  /
 *    | /                    | /
 *    |/                     |/ 
 * (0,0,0)----------------(1,0,0)
 */
float noise(in vec3 coord)
{
    vec3 cell = floor(coord);
    vec3 unit = fract(coord);
   
    vec3 unit_000 = unit;
    vec3 unit_100 = unit - vec3(1.0, 0.0, 0.0);
    vec3 unit_001 = unit - vec3(0.0, 0.0, 1.0);
    vec3 unit_101 = unit - vec3(1.0, 0.0, 1.0);
    vec3 unit_010 = unit - vec3(0.0, 1.0, 0.0);
    vec3 unit_110 = unit - vec3(1.0, 1.0, 0.0);
    vec3 unit_011 = unit - vec3(0.0, 1.0, 1.0);
    vec3 unit_111 = unit - 1.0;

    vec3 c_000 = cell;
    vec3 c_100 = cell + vec3(1.0, 0.0, 0.0);
    vec3 c_001 = cell + vec3(0.0, 0.0, 1.0);
    vec3 c_101 = cell + vec3(1.0, 0.0, 1.0);
    vec3 c_010 = cell + vec3(0.0, 1.0, 0.0);
    vec3 c_110 = cell + vec3(1.0, 1.0, 0.0);
    vec3 c_011 = cell + vec3(0.0, 1.0, 1.0);
    vec3 c_111 = cell + 1.0;

    float wx = fade(unit.x);
    float wy = fade(unit.y);
    float wz = fade(unit.z);
 
    float x000 = dot(gradient(c_000), unit_000);
	float x100 = dot(gradient(c_100), unit_100);
	float x001 = dot(gradient(c_001), unit_001);
	float x101 = dot(gradient(c_101), unit_101);
	float x010 = dot(gradient(c_010), unit_010);
	float x110 = dot(gradient(c_110), unit_110);
	float x011 = dot(gradient(c_011), unit_011);
	float x111 = dot(gradient(c_111), unit_111);
   
    // (0,0,0) - (1,0,0)
    // (0,0,1) - (1,0,1)
    // (0,1,0) - (1,1,0)
    // (0,1,1) - (1,1,1)
    float y0 = mix(x000, x100, wx);
    float y1 = mix(x001, x101, wx);
    float y2 = mix(x010, x110, wx);
    float y3 = mix(x011, x111, wx);
    
	float z0 = mix(y0, y2, wy);
    float z1 = mix(y1, y3, wy);
    
    return mix(z0, z1, wz);
}

vec3 palette(in float t) 
{
  vec3 a = vec3(0.5, 0.5, 0.5);
  vec3 b = vec3(0.5, 0.5, 0.5);
  vec3 c = vec3(1.0, 1.0, 1.0);
  vec3 d = vec3(0.30, 0.20, 0.20);

//   return a + b * cos(6.28318 * (c * t + d));
  return a + b * cos(6.28318 * (c * t + d));
}

/////////////////////////////////////////////////////
//// camera initialization
/////////////////////////////////////////////////////

//// set camera: ro - camera position, ta - camera lookat, cr - camera rotation angle
mat3 setCamera(in vec3 ro, in vec3 ta, float cr)
{
	vec3 cw = normalize(ta-ro);
	vec3 cp = vec3(sin(cr), cos(cr),0.0);
	vec3 cu = normalize(cross(cw,cp));
	vec3 cv = cross(cu,cw);
    return mat3(cu, cv, cw);
}


/////////////////////////////////////////////////////
//// sdf definitions
/////////////////////////////////////////////////////

//// sdf sphere
float sdSphere(vec3 p, float s)
{
    return length(p)-s;
}

//// sdf box
float sdBox(vec3 p, vec3 b)
{
    vec3 d = abs(p) - b;
    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}

float sdfBuzz(vec3 p) {

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    p = rotate(p, vec3(1., 0., 0.), PI / 3.);
    p = rotate(p, vec3(0., 0., 1.), PI / 3. + PI/3.0);
    if(length(p) > 1.0)
    {
        return length(p) - 0.9;
    }
    
    vec4 f0_0=sin(p.y*vec4(-.80,-.01,-1.92,-4.23)+p.z*vec4(-2.14,-.55,1.43,-3.91)+p.x*vec4(-.65,-4.60,.70,1.05)+vec4(6.68,-4.70,5.76,-8.73));
    vec4 f0_1=sin(p.y*vec4(3.04,-1.39,-4.89,-.74)+p.z*vec4(-.79,-.29,2.41,-1.27)+p.x*vec4(1.87,-1.19,-1.42,-2.16)+vec4(-4.59,4.00,-5.18,.16));
    vec4 f0_2=sin(p.y*vec4(-2.11,-2.22,-2.45,-.96)+p.z*vec4(-3.17,5.04,-1.49,-4.33)+p.x*vec4(-1.13,.50,-1.44,1.78)+vec4(-2.98,-5.45,5.24,2.99));
    vec4 f0_3=sin(p.y*vec4(-4.28,-4.85,2.92,1.90)+p.z*vec4(-2.69,.22,4.55,-4.28)+p.x*vec4(2.81,-.22,-1.57,2.65)+vec4(3.84,-8.14,3.42,-3.24));
    vec4 f0_4=sin(p.y*vec4(-2.96,-2.01,.71,4.73)+p.z*vec4(-1.52,2.16,2.66,2.46)+p.x*vec4(-.69,-4.14,-3.77,2.42)+vec4(-6.94,.64,2.53,4.57));
    vec4 f0_5=sin(p.y*vec4(-4.30,-2.90,-1.20,1.14)+p.z*vec4(-4.77,-2.67,.22,-.87)+p.x*vec4(-.07,-3.44,-4.27,-.50)+vec4(-.53,4.78,-2.41,-4.25));
    vec4 f0_6=sin(p.y*vec4(3.90,-4.90,-2.20,-3.71)+p.z*vec4(.42,-2.69,4.01,-3.11)+p.x*vec4(-3.66,-4.46,-1.32,.12)+vec4(7.19,-.03,7.17,.65));
    vec4 f0_7=sin(p.y*vec4(2.32,1.57,-1.54,2.58)+p.z*vec4(2.17,1.32,-.47,-2.71)+p.x*vec4(-4.47,.98,.41,-2.97)+vec4(-8.52,5.03,-4.25,1.40));
    vec4 f1_0=sin(mat4(.13,.50,.26,.30,.11,-.20,.13,.25,.08,-.34,-.03,.35,.32,-.17,-.45,-.02)*f0_0+
        mat4(.15,-.55,-.15,-.43,-.45,.04,.47,.16,-.32,-.18,-.19,-.23,.18,.06,-.07,-.41)*f0_1+
        mat4(-.40,-.37,.15,.49,-.23,-.16,-.23,-.05,.30,.41,-.02,.24,.07,-.06,.27,.17)*f0_2+
        mat4(.27,.32,.07,-.12,-.26,.27,-.32,.09,-.28,-.19,-.02,-.22,.02,-.14,.25,-.48)*f0_3+
        mat4(.07,-.33,.38,-.36,-.11,-.28,.18,.02,-.52,-.26,-.13,-.21,.22,-.10,-.31,.59)*f0_4+
        mat4(.03,.18,-.24,-.27,-.03,-.16,-.10,.03,.14,-.46,-.39,-.11,-.34,.06,.15,.40)*f0_5+
        mat4(-.29,.29,-.23,.08,.03,-.07,.10,-.27,.22,-.29,.33,.34,-.23,.10,.40,-.12)*f0_6+
        mat4(.09,.04,-.07,-.01,.27,.17,.29,.24,.21,-.37,-.01,-.25,.24,-.10,-.59,.05)*f0_7+
        vec4(-2.33,-2.39,-2.60,-1.26))/1.0+f0_0;
    vec4 f1_1=sin(mat4(-.37,-.55,-.45,.07,-.24,-.20,-.42,.06,.29,.28,.25,-.17,.26,-.26,.04,.32)*f0_0+
        mat4(.23,.34,.20,.36,.23,.39,.21,.24,-.13,.13,-.11,.27,-.53,-.28,.09,.17)*f0_1+
        mat4(-.02,-.29,.45,.22,-.26,-.09,-.22,.12,.09,.37,.10,-.05,-.05,.08,-.44,.28)*f0_2+
        mat4(-.38,-.14,-.24,.28,-.30,.21,-.33,-.12,.25,-.09,.33,.27,.23,.40,.37,.35)*f0_3+
        mat4(.39,.20,.26,-.38,-.25,.35,-.08,-.10,-.18,-.17,.57,-.30,.03,.09,.24,.14)*f0_4+
        mat4(-.31,.25,.45,-.29,.05,-.08,.20,.16,.09,.15,.20,-.47,-.04,.18,-.58,.31)*f0_5+
        mat4(-.20,-.16,.13,.12,.25,.21,-.09,.24,-.07,.19,-.35,.12,.12,-.36,-.45,.39)*f0_6+
        mat4(.37,.13,-.00,-.15,-.34,-.10,.72,.08,-.10,.24,-.10,.32,-.42,-.32,-.06,.12)*f0_7+
        vec4(-2.36,-.87,-2.01,-.98))/1.0+f0_1;
    vec4 f1_2=sin(mat4(-.09,-.46,-.00,-.09,-.19,.43,-.22,.11,.04,-.24,-.45,-.06,.28,.04,.36,-.40)*f0_0+
        mat4(.11,.25,-.09,-.34,.46,-.04,.09,-.35,.01,.22,.51,-.52,-.31,.18,.33,.54)*f0_1+
        mat4(-.07,.05,.08,-.30,.46,.39,.48,-.00,.06,-.25,-.31,-.34,.28,-.00,.05,.19)*f0_2+
        mat4(-.32,.05,.19,-.49,.10,.22,.13,.46,-.48,.08,.03,.38,.23,.16,-.10,-.21)*f0_3+
        mat4(-.24,-.45,-.37,.34,-.34,-.09,-.13,-.09,.31,-.27,.21,.33,.07,-.20,.16,-.13)*f0_4+
        mat4(.24,.68,-.00,-.04,-.34,-.30,.23,.12,-.30,-.13,-.02,.24,-.20,-.51,.36,.40)*f0_5+
        mat4(-.09,.03,.07,.23,-.06,-.07,-.08,.33,.13,.22,-.14,.48,.27,.21,.23,.16)*f0_6+
        mat4(.28,-.01,.26,-.45,.43,.28,-.16,.24,.30,.29,.09,-.17,.23,.09,-.11,.29)*f0_7+
        vec4(-.28,-2.79,1.69,-1.62))/1.0+f0_2;
    vec4 f1_3=sin(mat4(-.30,-.25,-.09,-.29,-.12,.14,-.01,-.70,-.09,.38,.28,.18,-.25,-.21,-.17,-.66)*f0_0+
        mat4(.44,-.14,.02,-.14,-.11,-.27,-.16,-.03,.51,.18,.35,.24,.30,-.03,.30,-.26)*f0_1+
        mat4(.25,.39,-.25,.18,.32,.50,-.06,-.21,-.40,.15,-.28,.28,.22,-.07,-.08,-.11)*f0_2+
        mat4(-.32,-.20,.34,.57,.10,-.60,.25,-.04,.14,-.35,.23,.20,.26,.29,.31,-.48)*f0_3+
        mat4(-.33,.21,-.02,.15,.03,-.13,.30,.27,.19,-.18,-.33,-.38,.40,-.34,-.23,-.14)*f0_4+
        mat4(.09,.78,.21,-.03,.19,-.18,.13,-.28,-.10,-.30,-.13,-.23,.14,-.55,.18,.02)*f0_5+
        mat4(-.26,.65,.22,-.07,.25,.38,-.15,-.36,.27,-.11,.03,.32,.01,.58,-.26,-.22)*f0_6+
        mat4(-.30,-.04,-.00,.37,-.16,.44,.09,-.00,.04,-.32,-.17,-.45,-.44,.37,-.14,-.79)*f0_7+
        vec4(.45,-.72,-2.25,.32))/1.0+f0_3;
    vec4 f1_4=sin(mat4(-.38,-.07,.00,.27,-.26,.86,-.20,-.30,.58,.03,-.41,.17,.31,-.05,.14,.20)*f0_0+
        mat4(.10,.27,.12,.15,-.55,.15,-.29,-.27,.02,-.40,-.69,.02,.01,.17,-.05,.74)*f0_1+
        mat4(-.32,-.14,-.24,.08,-.38,-.44,.14,.02,.03,.36,-.33,-.28,-.31,-.37,-.15,-.28)*f0_2+
        mat4(-.16,-.02,-.23,-.04,-.38,.34,.17,-.43,.47,-.31,-.23,.09,-.58,-.06,-.26,-.29)*f0_3+
        mat4(.10,-.09,.28,.36,-.21,-.11,-.15,.02,.22,.08,.22,-.14,.13,.11,.30,.40)*f0_4+
        mat4(-.55,.03,-.32,-.39,-.02,-.11,-.11,-.19,.02,-.07,-.06,-.37,-.30,-.33,.26,.11)*f0_5+
        mat4(-.31,.21,-.27,.07,-.31,.25,.17,.49,.07,-.10,-.15,-.45,-.41,.34,-.05,.38)*f0_6+
        mat4(.48,.01,.50,-.26,-.22,-.19,-.03,-.23,-.35,.12,.23,-.38,.28,.19,.07,-.69)*f0_7+
        vec4(.18,1.38,1.66,1.49))/1.0+f0_4;
    vec4 f1_5=sin(mat4(-.49,-.40,.12,-.01,-.13,.24,.30,-.12,.02,-.19,.26,-.32,.04,.38,.38,.01)*f0_0+
        mat4(-.34,.24,.38,-.16,.25,-.26,.00,-.08,-.36,-.32,.13,.37,.28,-.53,.10,.67)*f0_1+
        mat4(.39,-.24,.02,-.18,-.31,.52,-.41,-.23,.06,-.09,.39,-.14,.18,.27,.02,-.14)*f0_2+
        mat4(-.17,-.58,-.29,-.01,.07,-.02,.12,-.14,-.04,.22,-.00,.19,-.11,-.31,.42,.46)*f0_3+
        mat4(-.31,-.11,-.03,.37,.22,.14,-.11,.17,-.01,-.27,-.07,-.07,-.16,-.16,-.41,.08)*f0_4+
        mat4(-.21,.24,.01,-.04,.32,.01,-.07,.34,.40,-.17,.20,-.11,-.56,.31,.15,.01)*f0_5+
        mat4(-.38,.06,.02,-.43,.34,.21,-.14,-.23,-.16,.34,.07,-.28,-.33,.37,.02,.17)*f0_6+
        mat4(.08,-.44,.14,.10,.06,-.26,-.32,.18,.40,.21,-.19,-.30,-.41,-.26,.08,-.46)*f0_7+
        vec4(-.57,.02,-2.48,2.34))/1.0+f0_5;
    vec4 f1_6=sin(mat4(-.31,-.61,-.10,.10,.39,.09,.48,-.57,-.36,.28,-.22,.67,-.00,-.24,.05,.30)*f0_0+
        mat4(-.04,.09,-.04,.27,-.25,.43,-.22,-.30,-.33,-.50,.03,.21,-.32,-.37,.27,-.20)*f0_1+
        mat4(.11,.22,.17,-.17,.16,.29,-.11,-.16,.32,-.54,-.30,.04,-.32,.04,.07,-.28)*f0_2+
        mat4(-.25,-.53,.08,.13,.40,-.35,.79,.09,-.13,-.30,.14,-.34,.13,-.05,.18,.35)*f0_3+
        mat4(.23,-.37,.29,.01,-.13,-.36,.25,-.22,-.25,.39,-.22,.33,-.13,.34,-.30,-.30)*f0_4+
        mat4(.17,-.02,-.15,-.25,.06,-.30,.30,.41,.13,.34,.32,.18,.24,-.23,-.28,.46)*f0_5+
        mat4(-.13,-.34,-.10,.36,.21,-.35,-.25,-.13,-.11,-.43,.14,.11,.30,-.33,-.41,.13)*f0_6+
        mat4(-.15,-.37,-.02,-.41,-.24,-.33,-.42,-.09,.38,.42,.20,.17,-.06,.11,.03,-.10)*f0_7+
        vec4(-1.75,-2.46,-2.41,-1.06))/1.0+f0_6;
    vec4 f1_7=sin(mat4(.14,.18,.20,.44,.05,.08,-.46,.28,-.08,.18,-.08,-.19,.41,.52,.16,-.47)*f0_0+
        mat4(-.07,-.15,.23,.12,.29,-.16,.22,-.34,.05,.35,.14,.34,-.04,.20,-.35,.28)*f0_1+
        mat4(-.11,-.20,-.44,-.26,-.35,-.13,-.35,-.42,-.24,-.20,-.24,-.02,.10,-.40,.29,.30)*f0_2+
        mat4(-.27,-.07,-.21,-.11,-.17,-.49,.12,-.45,-.05,.14,.12,-.31,.13,-.51,-.26,.30)*f0_3+
        mat4(.28,-.20,.18,-.24,.04,.14,.39,.00,-.09,-.28,.46,.25,-.39,-.12,-.24,-.13)*f0_4+
        mat4(-.32,-.08,.03,.19,-.41,.17,.04,-.34,-.02,-.05,.02,.10,-.48,.29,.21,-.12)*f0_5+
        mat4(.00,-.60,.06,.18,-.13,.26,-.09,-.10,-.43,-.09,-.01,-.10,.19,-.25,.47,-.20)*f0_6+
        mat4(.43,.44,.24,-.21,.42,.30,-.09,.04,-.52,.10,.46,-.29,-.20,-.03,.63,-.48)*f0_7+
        vec4(-.50,-2.04,.98,1.87))/1.0+f0_7;
    vec4 f2_0=sin(mat4(.13,.06,.17,-.26,.21,-.26,-.22,.12,.37,.40,.52,.20,-.33,-.52,-.10,-.65)*f1_0+
        mat4(.57,.01,.40,-.11,-.24,-.01,.29,.37,-.01,.15,-.07,-.53,.20,-.36,.03,-.48)*f1_1+
        mat4(-.54,-.07,.19,.17,.34,-.26,-.43,.13,-.13,-.00,-.19,.32,-.02,.10,.68,-.09)*f1_2+
        mat4(.44,-.23,-.13,-.56,-.13,.55,-.30,.55,-.49,-.32,-.16,-.27,-.11,.40,-.07,-.04)*f1_3+
        mat4(-.06,.19,-.21,-.55,.60,.49,.14,-.42,.71,.54,-.13,-.47,-.40,-.03,-.45,-.80)*f1_4+
        mat4(-.69,.03,.50,-.31,-.21,.20,-.02,.39,-.16,-.63,.31,.40,-.65,.33,-.47,-.50)*f1_5+
        mat4(.50,.77,-.18,-.56,-.05,-.23,-.47,-.14,.08,.02,.28,.77,-.37,.29,.55,-.05)*f1_6+
        mat4(.51,-.33,.13,.58,-.01,-.11,.30,-.52,-.08,.45,.25,-.41,.47,.44,-.09,-.69)*f1_7+
        vec4(.98,2.80,.48,-.12))/1.4+f1_0;
    vec4 f2_1=sin(mat4(.29,-.19,-.14,.17,.14,-.28,-.10,.30,-.45,-.09,.21,.07,-.00,.65,.45,.19)*f1_0+
        mat4(-.22,-.40,.18,-.10,-.01,.31,-.27,.38,.12,.25,.63,-.16,-.63,-.23,.47,.13)*f1_1+
        mat4(-.25,.45,.39,-.15,-.23,.24,.59,-.33,.33,-.28,.26,-.29,.03,-.22,.25,.05)*f1_2+
        mat4(.10,.35,.18,-.17,.12,-.04,.44,.04,-.07,-.23,.28,.28,.41,-.09,.39,-.29)*f1_3+
        mat4(.42,-.13,-.08,.25,-.10,.04,.21,.28,.06,-.29,-.61,-.03,.36,.30,-.30,.05)*f1_4+
        mat4(-.24,-.16,.14,-.20,.44,-.27,.10,-.04,.02,.57,.27,-.09,.32,-.29,-.09,-.23)*f1_5+
        mat4(-.42,-.46,.00,-.13,.41,-.48,.49,.27,.40,-.19,.29,-.18,.18,-.20,.21,-.01)*f1_6+
        mat4(-.15,.12,.08,-.26,-.13,.28,.35,.20,-.05,-.59,-.24,-.21,.23,.14,-.34,.02)*f1_7+
        vec4(2.14,-1.26,-2.37,-.17))/1.4+f1_1;
    vec4 f2_2=sin(mat4(.28,-.21,-.19,-.31,.58,-.32,-.87,-.27,.16,.14,-.61,.50,-.24,-.42,.43,-.07)*f1_0+
        mat4(-.20,.42,-.03,-.45,-.19,.27,.04,.48,.49,-.14,-.00,-.38,.23,-.20,.33,.01)*f1_1+
        mat4(-.20,.36,.35,-.06,.25,-.22,.54,.46,-.48,-.14,.66,.28,-.27,-.04,.43,.28)*f1_2+
        mat4(-.40,.31,-.27,-.20,-.00,.03,.43,-.11,-.07,.36,.07,.57,.11,-.22,.06,.38)*f1_3+
        mat4(-.26,.17,.06,-.14,-.44,.54,.32,-.12,.20,.16,.46,-.03,.62,-.20,.58,-.38)*f1_4+
        mat4(.22,-.16,-.03,.41,.14,.30,.24,-.22,.08,-.54,.17,-.06,.27,-.07,-.77,-.48)*f1_5+
        mat4(-.19,.22,-.33,.04,-.13,-.15,.20,.29,.22,-.20,-.24,-.13,.44,-.36,.16,-.56)*f1_6+
        mat4(.31,-.35,.01,-.03,-.28,.66,.01,-.21,-.24,-.36,.02,-.47,.05,-.23,-.12,-.19)*f1_7+
        vec4(-.31,2.56,-.14,-2.36))/1.4+f1_2;
    vec4 f2_3=sin(mat4(-.12,.09,.35,.43,.23,.48,.10,-.25,-.19,-.28,.22,-.06,.02,-.20,-.28,.02)*f1_0+
        mat4(.09,.12,.09,.10,-.17,.04,-.10,-.34,.17,.05,-.40,-.21,.09,.24,.12,.33)*f1_1+
        mat4(.06,.61,-.31,-.51,-.07,.48,-.04,-.22,-.69,-.60,-.08,-.10,.39,-.00,-.21,-.26)*f1_2+
        mat4(.23,.09,.40,.04,-.14,-.57,.23,.14,.14,-.12,-.09,.28,.48,-.26,-.20,-.39)*f1_3+
        mat4(.18,.24,.44,.50,-.23,.04,.03,.15,.27,-.11,.08,-.56,-.11,-.16,-.05,-.39)*f1_4+
        mat4(.04,.34,.04,-.28,.16,-.37,-.06,-.00,-.06,-.10,.13,-.03,-.13,.18,-.29,-.12)*f1_5+
        mat4(-.26,.19,.07,-.08,.41,.00,.28,.17,-.01,-.40,-.22,-.60,-.20,.38,-.11,.23)*f1_6+
        mat4(-.34,.50,.13,-.19,.03,.40,-.19,.28,-.06,-.32,-.27,.08,.40,.05,.07,-.14)*f1_7+
        vec4(-1.19,.12,-2.19,1.57))/1.4+f1_3;
    vec4 f2_4=sin(mat4(.30,.06,.16,.41,-.21,.18,-.37,-.67,.36,.05,.34,.60,-.18,-.34,-.05,-.08)*f1_0+
        mat4(-.13,-.30,.20,-.43,-.66,-.47,.09,-.24,.06,-.22,-.16,-.10,-.06,-.28,-.02,.11)*f1_1+
        mat4(.04,-.15,-.28,.22,.22,.23,.30,.79,-.30,.67,.55,.13,-.31,-.37,.43,.20)*f1_2+
        mat4(-.08,.47,.35,-.86,.21,.21,.44,-.18,.35,-.36,.65,.86,.62,.03,.35,.97)*f1_3+
        mat4(.23,-.23,.39,-.07,.13,-.22,-.26,.16,.39,.36,-.06,-.92,-.69,.31,.21,.00)*f1_4+
        mat4(.19,.22,-.06,.18,.55,.06,.29,.37,.11,-.49,-.01,.82,.29,-.19,-.52,.33)*f1_5+
        mat4(-.26,.32,-.07,.30,-.14,.23,-.46,.06,.52,.14,.35,-.22,-.12,.34,-.27,-.34)*f1_6+
        mat4(.19,-.11,-.31,.14,-.51,-.29,.11,.07,-.39,.34,.44,.13,.63,-.04,.38,-.06)*f1_7+
        vec4(-.76,-.97,2.57,1.29))/1.4+f1_4;
    vec4 f2_5=sin(mat4(.01,.25,-.26,-.10,-.07,-.49,.09,-.46,.53,-.07,-.04,-.27,-.13,-.42,-.15,.05)*f1_0+
        mat4(-.04,.41,-.34,.12,.37,.70,-.27,-.37,-.37,-.38,.12,-.01,.20,.02,.15,-.45)*f1_1+
        mat4(-.24,-.31,-.27,.25,-.22,.43,.14,.27,-.27,.16,-.07,-.44,.90,-.55,-.15,-.27)*f1_2+
        mat4(.31,-.05,-.11,.12,.16,-.34,-.28,.41,-.24,-.01,-.34,-.31,.65,-.24,-.33,.26)*f1_3+
        mat4(-.18,-.56,.46,.39,-.47,.04,.07,-.12,.28,-.40,-.08,.02,.72,-.09,-.07,.08)*f1_4+
        mat4(-.08,-.55,-.03,.53,-.07,.03,.08,.05,-.01,.61,.11,.08,-.01,-.31,-.19,-.47)*f1_5+
        mat4(-.44,-.15,-.15,.09,-.07,.06,-.01,-.12,.49,-.14,.12,-.24,.07,.01,.22,-.05)*f1_6+
        mat4(-.10,.24,-.17,.20,-.04,-.23,-.10,-.40,.11,.42,.04,-.48,.17,-.01,.22,.44)*f1_7+
        vec4(-.53,-1.14,-2.26,-1.81))/1.4+f1_5;
    vec4 f2_6=sin(mat4(.43,.03,-.36,-.53,.09,.06,-.17,.37,.07,-.15,-.03,-.29,.60,-.05,-.07,.32)*f1_0+
        mat4(.08,-.06,-.40,.48,.12,.26,.50,-.45,-.17,.07,-.23,-.18,-.30,.02,.26,-.10)*f1_1+
        mat4(.02,.28,-.31,-.11,-.23,-.25,-.51,.52,.08,-.03,-.09,.32,-.11,-.08,-.19,-.31)*f1_2+
        mat4(-.41,-.22,.33,-.08,-.29,-.43,.56,-.23,.12,-.06,-.23,.37,.01,-.19,-.10,.13)*f1_3+
        mat4(-.24,-.12,-.03,.36,.36,.20,.15,.14,.17,-.00,-.01,.30,-.19,.22,-.13,-.04)*f1_4+
        mat4(.26,-.51,.27,.34,.16,.27,-.16,.23,.07,-.32,-.40,.23,-.06,.11,-.15,-.28)*f1_5+
        mat4(-.24,.24,-.08,.27,.04,.26,-.21,.38,-.04,-.22,.19,-.21,.16,-.02,.00,.11)*f1_6+
        mat4(-.16,.10,-.15,.37,-.12,.29,.26,-.06,-.17,.27,-.05,.08,-.26,-.02,.14,.12)*f1_7+
        vec4(-1.13,1.80,-.94,-1.35))/1.4+f1_6;
    vec4 f2_7=sin(mat4(-.14,-.57,-.19,.12,.09,-.08,-.20,-.15,-.08,-.17,.45,-.27,.41,-.23,.18,.05)*f1_0+
        mat4(-.28,-.32,-.60,.04,-.23,-.01,-.17,.24,-.33,-.04,.18,-.05,-.15,.33,.39,.10)*f1_1+
        mat4(-.14,.12,-.13,-.35,.14,-.25,.15,.20,.10,.05,.05,-.39,.22,.21,.36,.27)*f1_2+
        mat4(-.04,.21,.53,-.18,-.03,.23,-.53,-.24,.35,-.09,.18,-.27,.40,-.26,-.00,.54)*f1_3+
        mat4(-.11,.26,.43,-.43,-.78,-.07,.12,-.30,-.53,.01,-.25,-.15,.28,-.22,-.54,.06)*f1_4+
        mat4(.12,.08,-.29,-.22,.60,.09,-.01,-.03,-.28,.25,.51,.02,.15,.07,.07,-.43)*f1_5+
        mat4(-.22,-.13,-.11,.24,.23,-.08,-.19,.49,.37,.49,.36,.02,-.25,.11,.05,.09)*f1_6+
        mat4(.30,.34,.45,.12,-.35,.23,.33,-.02,.36,-.45,-.36,.18,-.18,-.12,.33,-.35)*f1_7+
        vec4(-2.34,2.11,-1.16,1.68))/1.4+f1_7;
    return dot(f2_0,vec4(-.03,-.03,.03,-.02))+
        dot(f2_1,vec4(-.04,-.03,.02,-.05))+
        dot(f2_2,vec4(-.03,.03,.03,.01))+
        dot(f2_3,vec4(-.03,-.01,-.03,.03))+
        dot(f2_4,vec4(.03,.04,.01,.02))+
        dot(f2_5,vec4(-.02,-.02,-.04,-.02))+
        dot(f2_6,vec4(-.04,.03,-.03,.00))+
        dot(f2_7,vec4(-.04,.02,-.03,-.00))+
        0.109;

}

float sdfCow(vec3 p)
{
    p = rotate(p, vec3(1., 0., 0.), PI / 2.);
    p = rotate(p, vec3(0., 0., 1.), PI / 3. + PI/3.0);
    // p = p * pnoise(p.yz * 0.1, 0.1, 4, 0.5 * sin(iTime));

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if(length(p) > 1.)
    {
        return length(p) - 0.9;
    }

    //// your implementation starts
    vec4 f0_0=sin(p.y*vec4(-3.01,2.17,3.83,2.85)+p.z*vec4(3.05,-.65,3.84,1.23)+p.x*vec4(1.52,-3.55,-2.66,1.17)+vec4(2.01,4.53,-1.51,-1.82));
    vec4 f0_1=sin(p.y*vec4(.16,.75,-1.51,1.73)+p.z*vec4(3.62,-2.55,2.20,.60)+p.x*vec4(1.15,-3.68,-2.58,4.26)+vec4(-5.44,8.27,-8.10,1.01));
    vec4 f0_2=sin(p.y*vec4(3.75,-2.67,.07,-2.24)+p.z*vec4(-.72,4.04,2.13,3.44)+p.x*vec4(3.37,-.56,-.37,-.17)+vec4(2.20,-6.90,-6.51,7.84));
    vec4 f0_3=sin(p.y*vec4(-3.27,-3.19,3.55,-2.76)+p.z*vec4(-4.86,-2.63,-1.71,.81)+p.x*vec4(-3.40,1.93,2.10,-2.34)+vec4(1.81,-7.93,3.96,-8.29));
    vec4 f1_0=sin(mat4(.05,.36,-.01,-.32,.27,-.40,.43,-.36,.16,.15,.12,.56,.40,.36,-.22,.18)*f0_0+
        mat4(.03,.35,.16,.18,.02,-.60,.17,-.26,-.29,-.44,.36,-.42,.13,-.07,-.25,.18)*f0_1+
        mat4(.35,-.10,-.31,-.71,-.56,.41,.46,.28,.62,-.01,.28,-.29,-.26,-.53,.74,-.18)*f0_2+
        mat4(-.08,.30,.04,.33,.25,-.52,-.12,-1.16,.18,-.03,.58,.74,-.72,.19,-.34,-.46)*f0_3+
        vec4(-2.96,-2.11,-1.42,-3.62))/1.0+f0_0;
    vec4 f1_1=sin(mat4(.58,.28,-.66,.03,-.03,-.43,-.46,.26,-.32,-.27,-.49,.26,.27,.55,-.45,.63)*f0_0+
        mat4(.12,.10,-.20,-.55,.39,-.96,.10,.75,-.08,-.26,.04,-.23,.30,-.26,.41,.36)*f0_1+
        mat4(.14,-.31,.32,.19,-.00,-.47,-.00,.56,-.86,-.50,-.45,.16,.15,-.55,-.53,.49)*f0_2+
        mat4(.15,-.27,-.15,.23,.63,-.51,.70,.11,-.09,-.19,-.32,.29,-.12,-.23,.24,-.47)*f0_3+
        vec4(-2.13,-1.13,-1.31,3.57))/1.0+f0_1;
    vec4 f1_2=sin(mat4(.65,.24,-.92,.13,-.45,.14,-.17,.74,.12,.29,.41,-.04,-.56,.23,-.05,.19)*f0_0+
        mat4(.73,-.56,.38,-.66,-.31,-.04,-.34,.41,.42,.56,.24,.26,-.36,-.31,-.13,-.15)*f0_1+
        mat4(-.36,.16,.02,.62,.48,.34,-.15,.21,.31,.14,.11,.04,.12,-.20,.09,-.01)*f0_2+
        mat4(-.03,-.23,-.32,.53,.45,-.04,-.12,.22,-.06,-.01,-.33,.52,.30,-.17,.22,.03)*f0_3+
        vec4(-3.52,-.63,-2.48,-3.37))/1.0+f0_2;
    vec4 f1_3=sin(mat4(.67,.00,.05,.21,-.27,.09,-.48,-.06,-.19,-.18,.43,.47,.42,-.19,.39,-.21)*f0_0+
        mat4(-.11,.12,-.24,.15,-.05,.69,-.20,.20,-.58,-.25,.05,.40,-.44,.04,-.04,-.52)*f0_1+
        mat4(.10,-.15,-.25,.10,.58,-.43,.18,.12,-1.13,-.65,-.05,-.27,.53,-.89,.89,-.08)*f0_2+
        mat4(.10,-.03,-.37,.32,-.22,-.49,-.99,-.60,.51,-.07,-.51,.12,-.11,-.17,-.29,-.41)*f0_3+
        vec4(-.83,-3.89,1.20,1.60))/1.0+f0_3;
    vec4 f2_0=sin(mat4(.01,.72,-.01,.18,.11,.08,-.20,-.47,.71,.03,.25,-.55,-.22,.08,.36,.27)*f1_0+
        mat4(-.83,.69,-.26,-.39,-.21,-.67,-.49,.47,.34,.18,.09,-.27,-.41,-.02,.16,.16)*f1_1+
        mat4(.02,.04,.24,.47,-.58,-.31,-.21,.58,-.27,-.35,.04,1.03,-.05,-.11,.38,.20)*f1_2+
        mat4(-.30,-.19,.33,.06,-.86,-1.02,.04,.83,-.91,-.49,.27,-.06,-.51,.33,-.60,-.67)*f1_3+
        vec4(.09,-.96,-1.60,1.12))/1.4+f1_0;
    vec4 f2_1=sin(mat4(-.04,.57,-.16,-.84,.10,.17,-.43,-.35,.22,-.32,.28,.26,-.30,.34,-.38,.76)*f1_0+
        mat4(.49,.50,-.10,.02,.06,-.51,-.09,.06,-.58,.03,-.79,.19,-.06,-.27,-.40,.12)*f1_1+
        mat4(.16,-.33,.62,-.57,.01,.39,-.57,-1.18,.09,.46,-.49,-.45,.69,-.59,.20,-.40)*f1_2+
        mat4(.26,.04,-.59,.26,-.33,-.26,.34,-.90,.29,.10,-.01,.19,-.36,.36,.51,-.93)*f1_3+
        vec4(-.62,2.06,-3.47,-1.68))/1.4+f1_1;
    vec4 f2_2=sin(mat4(.89,.43,-.30,-.26,-.10,-.58,-.09,.28,-.25,.29,-.45,-.36,.70,.39,-.74,-.28)*f1_0+
        mat4(-.15,-.07,.27,-.41,-.36,-.20,.12,.30,.02,-.70,-.67,.29,1.19,.25,.54,.57)*f1_1+
        mat4(-.02,-.31,-.51,-.31,.23,.41,.04,.76,.44,-.19,-.57,.99,.16,-.43,.78,-.02)*f1_2+
        mat4(-.18,.19,.23,.05,.15,-.09,.23,.47,.40,.20,.23,.13,-.76,-.24,.30,.52)*f1_3+
        vec4(-3.21,-2.85,.64,-1.89))/1.4+f1_2;
    vec4 f2_3=sin(mat4(.40,-.77,.47,-.33,.86,.10,.07,.49,-.37,-1.58,-1.35,-.04,-.26,.57,.27,.23)*f1_0+
        mat4(-.14,-.75,-.32,.19,-.11,-.42,.03,-.32,-.10,.05,.07,-.11,-.88,-.91,-.02,-.46)*f1_1+
        mat4(.20,-.58,.64,.85,.06,.93,.35,.21,.06,-.19,.25,.82,.27,-.03,1.32,.45)*f1_2+
        mat4(-.11,-.38,1.33,.44,.39,.28,.66,-.30,.72,-.02,.33,-.12,-.39,.63,-1.03,1.04)*f1_3+
        vec4(3.46,-2.31,2.02,.57))/1.4+f1_3;
    return dot(f2_0,vec4(-.08,-.04,-.08,.05))+
        dot(f2_1,vec4(-.06,-.08,-.05,-.03))+
        dot(f2_2,vec4(-.04,-.06,-.03,-.11))+
        dot(f2_3,vec4(-.06,.03,.02,.09))+
        -0.179;
    //// your implementation ends
}

float sdfPlaneNoisy(vec3 p, float h)
{
    float b = max(-0.1, p.y - h);
    return exp(-b * 0.05);
}

float sdfUnion(float d1, float d2)
{
    return min(d1, d2);
}

float getFlameOffsetSDF(vec3 p) {
    vec3 color = vec3(0.0);
    float distance = sdfCow(p - vec3(0.0, 1., 4.));
    // float distance2 = sdfBuzz(p - vec3(1.0, 1.0, 1.0));
    // float base = sdfUnion(distance, distance2);
    float base = distance;

    uint seed = 0x114514U;
    // float n = perlinNoise(p * 0.1 + vec3(0.0, sin(iTime), cos(iTime)), 1, 6, 0.5, 2.0, seed);
    float n = noise(p * 0.7 + vec3(0.0, sin(iTime), cos(iTime)));

    return base + n * 0.07;
}

vec4 flameColor(float d){
    float t = smoothstep(0.0, 1.0, -d);
    return vec4( 
        mix(vec3(1.0,0.2,0.0), vec3(1.0,1.0,0.2), t*t),
        t
    );
}


/////////////////////////////////////////////////////
//// get SDF volume
/////////////////////////////////////////////////////
vec4 readSDFVolume(vec3 p)
{
    //// sdf object
    // float distance = sdSphere(p, 1.0);
    // float distance2 = sdSphere(vec3(p.x - 1.0, p.y - 1.0, p.z - 1.0), 0.3);

    // float distance = sdfCow(p - vec3(0.0, 1., 4.));
    // float distance2 = sdfBuzz(p - vec3(1.0, 1.0, 1.0));
    float dist_off = getFlameOffsetSDF(p);
    
    //// convert sdf value to a color

    vec3 color = flameColor(dist_off).rgb;
    // if (distance < 0.0 || distance2 < 0.0) {
    if (dist_off < 0.0) {
        return vec4(color, 1.0);
    }
    return vec4(color, 0.0);
    //// your implementation starts

    // return vec4(0.0, 0.0, 0.0, 0.0);

    //// your implementation ends
}

vec4 readFloorVolume(vec3 p) {
    float dist_cloud = sdfPlaneNoisy(p, 0.) + noise(p * 0.1 + vec3(0.0, sin(iTime), cos(iTime))) * 0.05;
    vec3 color = palette(dist_cloud);
    if (dist_cloud < 0.) {
        return vec4(color, 0.4);
    }
    return vec4(color, 0.0);
}


vec4 volumeRendering(vec3 ro, vec3 rd, float near, float far, int n_samples) 
{
    float stepSize = (far - near) / float(n_samples);                           //// step size of each sample

    //// color and transmittance
    vec3 color = vec3(0.0);                                                     //// accumulated color
    float transmittance = 1.0;                                                  //// transmittance

    //// ray marching loop
    for (int i = 0; i < n_samples; i++) {
        float t = near + stepSize * float(i);                                   //// t value along the ray
        vec3 p = ro + t * rd;                                                   //// sample position on the ray

        //// your implementation starts
        vec4 color_sdf = readSDFVolume(vec3(p.x, p.y + 1.0, p.z + 2.0));
        // vec4 color_floor = readFloorVolume(p);
        
        vec4 color_sum = color_sdf;
        float alpha = exp(color_sum.a * -stepSize);
        color += transmittance * (1.0 - alpha) * color_sum.rgb;
        transmittance *= alpha;

        //// your implementation ends

        //// early termination if opacity is high
        if (transmittance < 0.01) break;
    }
    
    //// return color and transmittance
    return vec4(color, 1.0 - transmittance);                                   
}

vec4 floorVolumeRendering(vec3 ro, vec3 rd, float near, float far, int n_samples) 
{
    float stepSize = (far - near) / float(n_samples);                           //// step size of each sample

    //// color and transmittance
    vec3 color = vec3(0.8, 0.8, 0.85);                                                     //// accumulated color
    float transmittance = 1.0;                                                  //// transmittance

    //// ray marching loop
    for (int i = 0; i < n_samples; i++) {
        float t = near + stepSize * float(i);                                   //// t value along the ray
        vec3 p = ro + t * rd;                                                   //// sample position on the ray

        //// your implementation starts
        vec4 color_floor = readFloorVolume(p);

        float alpha = exp(color_floor.a * -stepSize);
        vec3 color_curr = mix(color, vec3(0.9,0.9,0.95), alpha);
        
        color += transmittance * (1.0 - alpha) * color_curr;
        transmittance *= alpha;

        //// your implementation ends

        //// early termination if opacity is high
        if (transmittance < 0.99) break;
    }
    
    //// return color and transmittance
    return vec4(color, 1.0 - transmittance);                                   
}


void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    //// normalize fragment coordinates to [-0.5, 0.5] range
    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;

    //// camera 
    float angle = 0.4;                                                  //// camera angle
    vec3 ta = vec3(-1.0, -1.0, 0.0);                                              //// object center
    float radius = 5.5;                                                         //// camera rotation
    float height = 2.2;                                                         //// camera height
    vec3 ro = ta + vec3(radius * cos(angle), height, radius * sin(angle));      //// camera position
    mat3 ca = setCamera(ro, ta, 0.0);                                           //// camera matrix
    
    //// ray
    vec3 rd = ca * normalize(vec3(uv, 1.0));                                    //// ray direction
    float near = 2.0;                                                           //// near bound
    float far = 8.5;                                                            //// far bound    
    int n_samples = 256;                                                        //// number of samples along each ray
    
    //// final output color
    
    // fragColor = floorVolumeRendering(ro, rd, near, far, n_samples);
    fragColor = volumeRendering(ro, rd, near, far, n_samples)
        + floorVolumeRendering(ro, rd, near, far, n_samples);  //// volumetric ray marching

}


void main()
{
    mainImage(gl_FragColor, gl_FragCoord.xy);
}